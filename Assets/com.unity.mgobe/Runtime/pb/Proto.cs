// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lagame {

  /// <summary>Holder for reflection information generated from proto.proto</summary>
  public static partial class ProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for proto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtwcm90by5wcm90bxIGbGFnYW1lIoUCChhDbGllbnRTZW5kU2VydmVyUmVx",
            "V3JhcDESDwoHdmVyc2lvbhgBIAEoCRIQCghhcHBfbmFtZRgCIAEoCRILCgNj",
            "bWQYAyABKAkSCwoDc2VxGAQgASgJEhEKCWNsaWVudF9pcBgFIAEoCRISCgpz",
            "ZXJ2aWNlX2lwGAYgASgJEhAKCGJ1c2luZXNzGAcgASgJEhAKCGF1dGhfa2V5",
            "GAggASgJEhEKCWF1dGhfdHlwZRgJIAEoDRIPCgdhdXRoX2lwGAogASgJEg8K",
            "B2dhbWVfaWQYCyABKAkSCwoDdWlkGAwgASgEEhEKCXBsYXllcl9pZBgNIAEo",
            "CRIMCgRib2R5GA4gASgMIoUCChhTZXJ2ZXJTZW5kQ2xpZW50QnN0V3JhcDES",
            "DwoHdmVyc2lvbhgBIAEoCRIQCghhcHBfbmFtZRgCIAEoCRILCgNjbWQYAyAB",
            "KAkSCwoDc2VxGAQgASgJEhEKCWNsaWVudF9pcBgFIAEoCRISCgpzZXJ2aWNl",
            "X2lwGAYgASgJEhAKCGJ1c2luZXNzGAcgASgJEhAKCGF1dGhfa2V5GAggASgJ",
            "EhEKCWF1dGhfdHlwZRgJIAEoDRIPCgdhdXRoX2lwGAogASgJEg8KB2dhbWVf",
            "aWQYCyABKAkSCwoDdWlkGAwgASgEEhEKCXBsYXllcl9pZBgNIAEoCRIMCgRi",
            "b2R5GA4gASgMIlgKGENsaWVudFNlbmRTZXJ2ZXJSc3BXcmFwMRILCgNzZXEY",
            "ASABKAkSEAoIZXJyX2NvZGUYAiABKAUSDwoHZXJyX21zZxgDIAEoCRIMCgRi",
            "b2R5GAQgASgMIkcKGENsaWVudFNlbmRTZXJ2ZXJSZXFXcmFwMhIdCgNjbWQY",
            "ASABKA4yEC5sYWdhbWUuUHJvdG9DbWQSDAoEYm9keRgCIAEoDCIoChhDbGll",
            "bnRTZW5kU2VydmVyUnNwV3JhcDISDAoEYm9keRgBIAEoDCJKCgxIZWFydEJl",
            "YXRSZXESKAoIY29uX3R5cGUYASABKA4yFi5sYWdhbWUuQ29ubmVjdGlvblR5",
            "cGUSEAoIcm91dGVfaWQYAiABKAkiDgoMSGVhcnRCZWF0UnNwIlsKGFNlcnZl",
            "clNlbmRDbGllbnRCc3RXcmFwMhIyCgR0eXBlGAEgASgOMiQubGFnYW1lLlNl",
            "cnZlclNlbmRDbGllbnRCc3RXcmFwMlR5cGUSCwoDbXNnGAIgASgMIiIKIE5P",
            "VVNFU2VydmVyU2VuZENsaWVudEJzdFJzcFdyYXAyIjAKDUNoZWNrTG9naW5S",
            "ZXESDQoFdG9rZW4YASABKAkSEAoIcm91dGVfaWQYAiABKAkiDwoNQ2hlY2tM",
            "b2dpblJzcCIgCgxQdXNoQm9keVR5cGUSEAoIcHVzaF9tc2cYASABKAkirQEK",
            "CExvZ2luUmVxEg8KB2dhbWVfaWQYASABKAkSDwoHb3Blbl9pZBgCIAEoCRIQ",
            "CghwbGF0Zm9ybRgDIAEoBBIPCgdjaGFubmVsGAQgASgEEg0KBW5vbmNlGAUg",
            "ASgEEhEKCXRpbWVzdGFtcBgGIAEoBBIMCgRzaWduGAcgASgJEhEKCWRldmlj",
            "ZV9pZBgIIAEoCRILCgNtYWMYCSABKAkSDAoEaW1laRgKIAEoCSJnCghMb2dp",
            "blJzcBINCgV0b2tlbhgBIAEoCRIRCglwbGF5ZXJfaWQYAiABKAkSEwoLZXhw",
            "aXJlX3RpbWUYAyABKAQSJAoJc2RrQ29uZmlnGAQgASgLMhEubGFnYW1lLlNk",
            "a0NvbmZpZyJkCglTZGtDb25maWcSFQoNcGluZ19pbnRlcnZhbBgBIAEoDRIX",
            "Cg9yZXBvcnRfaW50ZXJ2YWwYAiABKA0SEwoLc2VydmVyX3RpbWUYAyABKAQS",
            "EgoKZW5hYmxlX3VkcBgEIAEoCCILCglMb2dvdXRSZXEiCwoJTG9nb3V0UnNw",
            "IjUKEVN0YXJ0RnJhbWVTeW5jUmVxEg8KB3Jvb21faWQYASABKAkSDwoHZ2Ft",
            "ZV9pZBgCIAEoCSITChFTdGFydEZyYW1lU3luY1JzcCI0ChBTdG9wRnJhbWVT",
            "eW5jUmVxEg8KB3Jvb21faWQYASABKAkSDwoHZ2FtZV9pZBgCIAEoCSISChBT",
            "dG9wRnJhbWVTeW5jUnNwIj8KCUZyYW1lSXRlbRIRCglwbGF5ZXJfaWQYASAB",
            "KAkSDAoEZGF0YRgCIAEoCRIRCgl0aW1lc3RhbXAYAyABKAQiQAoMU2VuZEZy",
            "YW1lUmVxEg8KB3Jvb21faWQYASABKAkSHwoEaXRlbRgCIAEoCzIRLmxhZ2Ft",
            "ZS5GcmFtZUl0ZW0iDgoMU2VuZEZyYW1lUnNwIhwKDEZyYW1lRXh0SW5mbxIM",
            "CgRzZWVkGAEgASgEIlgKBUZyYW1lEgoKAmlkGAEgASgEEiAKBWl0ZW1zGAIg",
            "AygLMhEubGFnYW1lLkZyYW1lSXRlbRIhCgNleHQYAyABKAsyFC5sYWdhbWUu",
            "RnJhbWVFeHRJbmZvIlAKD1JlcXVlc3RGcmFtZVJlcRIPCgdyb29tX2lkGAEg",
            "ASgJEhYKDmJlZ2luX2ZyYW1lX2lkGAIgASgEEhQKDGVuZF9mcmFtZV9pZBgD",
            "IAEoBCIwCg9SZXF1ZXN0RnJhbWVSc3ASHQoGZnJhbWVzGAEgAygLMg0ubGFn",
            "YW1lLkZyYW1lIpgCCgpQbGF5ZXJJbmZvEgoKAmlkGAEgASgJEgwKBG5hbWUY",
            "AiABKAkSDwoHdGVhbV9pZBgDIAEoCRIcChRjdXN0b21fcGxheWVyX3N0YXR1",
            "cxgEIAEoBBIWCg5jdXN0b21fcHJvZmlsZRgFIAEoCRIyChRjb21tb25fbmV0",
            "d29ya19zdGF0ZRgGIAEoDjIULmxhZ2FtZS5OZXR3b3JrU3RhdGUSMQoTcmVs",
            "YXlfbmV0d29ya19zdGF0ZRgHIAEoDjIULmxhZ2FtZS5OZXR3b3JrU3RhdGUS",
            "EAoIaXNfcm9ib3QYCCABKAgSMAoQbWF0Y2hfYXR0cmlidXRlcxgJIAMoCzIW",
            "LmxhZ2FtZS5NYXRjaEF0dHJpYnV0ZSJOCghUZWFtSW5mbxIKCgJpZBgBIAEo",
            "CRIMCgRuYW1lGAIgASgJEhMKC21pbl9wbGF5ZXJzGAMgASgNEhMKC21heF9w",
            "bGF5ZXJzGAQgASgNIp4DCghSb29tSW5mbxIKCgJpZBgBIAEoCRIMCgRuYW1l",
            "GAIgASgJEgwKBHR5cGUYAyABKAkSKwoLY3JlYXRlX3R5cGUYBCABKA4yFi5s",
            "YWdhbWUuQ3JlYXRlUm9vbVR5cGUSEwoLbWF4X3BsYXllcnMYBSABKAQSDQoF",
            "b3duZXIYBiABKAkSEgoKaXNfcHJpdmF0ZRgJIAEoCBIZChFjdXN0b21fcHJv",
            "cGVydGllcxgKIAEoCRInCgtwbGF5ZXJfbGlzdBgLIAMoCzISLmxhZ2FtZS5Q",
            "bGF5ZXJJbmZvEiMKCXRlYW1fbGlzdBgNIAMoCzIQLmxhZ2FtZS5UZWFtSW5m",
            "bxIwChBmcmFtZV9zeW5jX3N0YXRlGA4gASgOMhYubGFnYW1lLkZyYW1lU3lu",
            "Y1N0YXRlEhIKCmZyYW1lX3JhdGUYDyABKA0SEAoIcm91dGVfaWQYECABKAkS",
            "EwoLY3JlYXRlX3RpbWUYESABKAQSFwoPc3RhcnRfZ2FtZV90aW1lGBIgASgE",
            "EhYKDmlzX2ZvcmJpZF9qb2luGBMgASgIIrwCCg1DcmVhdGVSb29tUmVxEhEK",
            "CXJvb21fbmFtZRgBIAEoCRIRCglyb29tX3R5cGUYAiABKAkSKwoLY3JlYXRl",
            "X3R5cGUYAyABKA4yFi5sYWdhbWUuQ3JlYXRlUm9vbVR5cGUSEwoLbWF4X3Bs",
            "YXllcnMYBCABKAQSEgoKaXNfcHJpdmF0ZRgHIAEoCBIZChFjdXN0b21fcHJv",
            "cGVydGllcxgIIAEoCRInCgtwbGF5ZXJfaW5mbxgJIAEoCzISLmxhZ2FtZS5Q",
            "bGF5ZXJJbmZvEg4KBnJlZ2lvbhgLIAEoCRINCgVvd25lchgMIAEoCRInCgtw",
            "bGF5ZXJfbGlzdBgNIAMoCzISLmxhZ2FtZS5QbGF5ZXJJbmZvEiMKCXRlYW1f",
            "bGlzdBgOIAMoCzIQLmxhZ2FtZS5UZWFtSW5mbyI0Cg1DcmVhdGVSb29tUnNw",
            "EiMKCXJvb21faW5mbxgBIAEoCzIQLmxhZ2FtZS5Sb29tSW5mbyKBAQoLSm9p",
            "blJvb21SZXESDwoHcm9vbV9pZBgBIAEoCRIPCgd0ZWFtX2lkGAIgASgJEicK",
            "CWpvaW5fdHlwZRgDIAEoDjIULmxhZ2FtZS5Kb2luUm9vbVR5cGUSJwoLcGxh",
            "eWVyX2luZm8YBCABKAsyEi5sYWdhbWUuUGxheWVySW5mbyIyCgtKb2luUm9v",
            "bVJzcBIjCglyb29tX2luZm8YASABKAsyEC5sYWdhbWUuUm9vbUluZm8iDgoM",
            "TGVhdmVSb29tUmVxIjMKDExlYXZlUm9vbVJzcBIjCglyb29tX2luZm8YASAB",
            "KAsyEC5sYWdhbWUuUm9vbUluZm8iEAoORGlzbWlzc1Jvb21SZXEiEAoORGlz",
            "bWlzc1Jvb21Sc3AiswEKDUNoYW5nZVJvb21SZXESEQoJcm9vbV9uYW1lGAEg",
            "ASgJEg0KBW93bmVyGAIgASgJEhIKCmlzX3ByaXZhdGUYBSABKAgSGQoRY3Vz",
            "dG9tX3Byb3BlcnRpZXMYBiABKAkSFgoOaXNfZm9yYmlkX2pvaW4YByABKAgS",
            "OQoXY2hhbmdlX3Jvb21fb3B0aW9uX2xpc3QYCCADKA4yGC5sYWdhbWUuQ2hh",
            "bmdlUm9vbU9wdGlvbiI0Cg1DaGFuZ2VSb29tUnNwEiMKCXJvb21faW5mbxgE",
            "IAEoCzIQLmxhZ2FtZS5Sb29tSW5mbyLHAQoQU3ZyQ2hhbmdlUm9vbVJlcRIR",
            "Cglyb29tX25hbWUYASABKAkSDQoFb3duZXIYAiABKAkSEgoKaXNfcHJpdmF0",
            "ZRgFIAEoCBIZChFjdXN0b21fcHJvcGVydGllcxgGIAEoCRIWCg5pc19mb3Ji",
            "aWRfam9pbhgHIAEoCBIPCgdyb29tX2lkGAggASgJEjkKF2NoYW5nZV9yb29t",
            "X29wdGlvbl9saXN0GAkgAygOMhgubGFnYW1lLkNoYW5nZVJvb21PcHRpb24i",
            "NwoQU3ZyQ2hhbmdlUm9vbVJzcBIjCglyb29tX2luZm8YBCABKAsyEC5sYWdh",
            "bWUuUm9vbUluZm8iKwoPUmVtb3ZlUGxheWVyUmVxEhgKEHJlbW92ZV9wbGF5",
            "ZXJfaWQYAyABKAkiNgoPUmVtb3ZlUGxheWVyUnNwEiMKCXJvb21faW5mbxgB",
            "IAEoCzIQLmxhZ2FtZS5Sb29tSW5mbyI/ChJTdnJSZW1vdmVQbGF5ZXJSZXES",
            "DwoHcm9vbV9pZBgBIAEoCRIYChByZW1vdmVfcGxheWVyX2lkGAMgASgJIjkK",
            "ElN2clJlbW92ZVBsYXllclJzcBIjCglyb29tX2luZm8YASABKAsyEC5sYWdh",
            "bWUuUm9vbUluZm8iJQoSR2V0Um9vbUJ5Um9vbUlkUmVxEg8KB3Jvb21faWQY",
            "ASABKAkiOQoSR2V0Um9vbUJ5Um9vbUlkUnNwEiMKCXJvb21faW5mbxgBIAEo",
            "CzIQLmxhZ2FtZS5Sb29tSW5mbyJJCg9TZW5kVG9DbGllbnRSZXESDwoHcm9v",
            "bV9pZBgBIAEoCRIYChByZWN2X3BsYXllcl9saXN0GAIgAygJEgsKA21zZxgD",
            "IAEoCSIRCg9TZW5kVG9DbGllbnRSc3AiOwobQ2hhbmdlQ3VzdG9tUGxheWVy",
            "U3RhdHVzUmVxEhwKFGN1c3RvbV9wbGF5ZXJfc3RhdHVzGAEgASgEIkIKG0No",
            "YW5nZUN1c3RvbVBsYXllclN0YXR1c1JzcBIjCglyb29tX2luZm8YASABKAsy",
            "EC5sYWdhbWUuUm9vbUluZm8iPgoeU3ZyQ2hhbmdlQ3VzdG9tUGxheWVyU3Rh",
            "dHVzUmVxEhwKFGN1c3RvbV9wbGF5ZXJfc3RhdHVzGAEgASgEIkUKHlN2ckNo",
            "YW5nZUN1c3RvbVBsYXllclN0YXR1c1JzcBIjCglyb29tX2luZm8YASABKAsy",
            "EC5sYWdhbWUuUm9vbUluZm8iSgobQ2hhbmdlUGxheWVyTmV0d29ya1N0YXRl",
            "UmVxEisKDW5ldHdvcmtfc3RhdGUYASABKA4yFC5sYWdhbWUuTmV0d29ya1N0",
            "YXRlIkIKG0NoYW5nZVBsYXllck5ldHdvcmtTdGF0ZVJzcBIjCglyb29tX2lu",
            "Zm8YASABKAsyEC5sYWdhbWUuUm9vbUluZm8iaQoOR2V0Um9vbUxpc3RSZXES",
            "DwoHZ2FtZV9pZBgBIAEoCRIPCgdwYWdlX25vGAIgASgNEhEKCXBhZ2Vfc2l6",
            "ZRgDIAEoDRIRCglyb29tX3R5cGUYBCABKAkSDwoHaXNfZGVzYxgFIAEoCCJV",
            "Cg5HZXRSb29tTGlzdFJzcBIPCgdnYW1lX2lkGAEgASgJEiMKCXJvb21fbGlz",
            "dBgCIAMoCzIQLmxhZ2FtZS5Sb29tSW5mbxINCgV0b3RhbBgDIAEoBCJlChJN",
            "YXRjaFJvb21TaW1wbGVSZXESEQoJcm9vbV90eXBlGAEgASgJEhMKC21heF9w",
            "bGF5ZXJzGAIgASgEEicKC3BsYXllcl9pbmZvGAMgASgLMhIubGFnYW1lLlBs",
            "YXllckluZm8iOQoSTWF0Y2hSb29tU2ltcGxlUnNwEiMKCXJvb21faW5mbxgB",
            "IAEoCzIQLmxhZ2FtZS5Sb29tSW5mbyIVChNNYXRjaFJvb21Db21wbGV4UmVx",
            "IhUKE01hdGNoUm9vbUNvbXBsZXhSc3AiFwoVTWF0Y2hQbGF5ZXJzU2ltcGxl",
            "UmVxIhcKFU1hdGNoUGxheWVyc1NpbXBsZVJzcCItCg5NYXRjaEF0dHJpYnV0",
            "ZRIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgFIpsCCg9NYXRjaFBsYXll",
            "ckluZm8SCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIcChRjdXN0b21fcGxh",
            "eWVyX3N0YXR1cxgDIAEoBBIWCg5jdXN0b21fcHJvZmlsZRgEIAEoCRIwChBt",
            "YXRjaF9hdHRyaWJ1dGVzGAUgAygLMhYubGFnYW1lLk1hdGNoQXR0cmlidXRl",
            "EikKDG1hdGNoX3N0YXR1cxgGIAEoDjITLmxhZ2FtZS5NYXRjaFN0YXR1cxIP",
            "Cgd0ZWFtX2lkGAcgASgJEg4KBnJlZ2lvbhgIIAEoCRITCgt0ZWFtX2xlYWRl",
            "chgJIAEoCRITCgtzZGtfdmVyc2lvbhgKIAEoCRIQCghncm91cF9pZBgLIAEo",
            "CSKgAgoUTWF0Y2hHcm91cFBsYXllckluZm8SCgoCaWQYASABKAkSDAoEbmFt",
            "ZRgCIAEoCRIcChRjdXN0b21fcGxheWVyX3N0YXR1cxgDIAEoBBIWCg5jdXN0",
            "b21fcHJvZmlsZRgEIAEoCRIwChBtYXRjaF9hdHRyaWJ1dGVzGAUgAygLMhYu",
            "bGFnYW1lLk1hdGNoQXR0cmlidXRlEikKDG1hdGNoX3N0YXR1cxgGIAEoDjIT",
            "LmxhZ2FtZS5NYXRjaFN0YXR1cxIPCgd0ZWFtX2lkGAcgASgJEg4KBnJlZ2lv",
            "bhgIIAEoCRITCgt0ZWFtX2xlYWRlchgJIAEoCRITCgtzZGtfdmVyc2lvbhgK",
            "IAEoCRIQCghncm91cF9pZBgLIAEoCSLfAQoOTWF0Y2hHcm91cEluZm8SCgoC",
            "aWQYASABKAkSDgoGbGVhZGVyGAIgASgJEhYKDnBsYXllcl9pZF9saXN0GAMg",
            "AygJEjEKEHBsYXllcl9pbmZvX2xpc3QYBCADKAsyFy5sYWdhbWUuTWF0Y2hQ",
            "bGF5ZXJJbmZvEjAKEG1hdGNoX2F0dHJpYnV0ZXMYBSADKAsyFi5sYWdhbWUu",
            "TWF0Y2hBdHRyaWJ1dGUSDgoGcmVnaW9uGAYgASgJEhMKC3Nka192ZXJzaW9u",
            "GAcgASgJEg8KB3RlYW1faWQYCCABKAki1wEKDU1hdGNoVGVhbUluZm8SDwoH",
            "dGVhbV9pZBgBIAEoCRIRCgl0ZWFtX25hbWUYAiABKAkSEwoLdGVhbV9sZWFk",
            "ZXIYAyABKAkSDwoHbWVtYmVycxgEIAMoCRIwChBtYXRjaF9hdHRyaWJ1dGVz",
            "GAUgAygLMhYubGFnYW1lLk1hdGNoQXR0cmlidXRlEhsKE21lbWJlcl9zZGtf",
            "dmVyc2lvbnMYBiADKAkSEQoJZ3JvdXBfaWRzGAcgAygJEhoKEmdyb3VwX3Nk",
            "a192ZXJzaW9ucxgIIAMoCSJTCg9NYXRjaFBsYXllcnNSZXESEgoKbWF0Y2hf",
            "Y29kZRgCIAEoCRIsCgtwbGF5ZXJfaW5mbxgDIAEoCzIXLmxhZ2FtZS5NYXRj",
            "aFBsYXllckluZm8iJQoPTWF0Y2hQbGF5ZXJzUnNwEhIKCm1hdGNoX2NvZGUY",
            "ASABKAkiWwoNTWF0Y2hHcm91cFJlcRISCgptYXRjaF9jb2RlGAEgASgJEjYK",
            "EHBsYXllcl9pbmZvX2xpc3QYAiADKAsyHC5sYWdhbWUuTWF0Y2hHcm91cFBs",
            "YXllckluZm8iIwoNTWF0Y2hHcm91cFJzcBISCgptYXRjaF9jb2RlGAEgASgJ",
            "Ij0KFENhbmNlbFBsYXllck1hdGNoUmVxEiUKCm1hdGNoX3R5cGUYAyABKA4y",
            "ES5sYWdhbWUuTWF0Y2hUeXBlIhYKFENhbmNlbFBsYXllck1hdGNoUnNwIjQK",
            "DUNyZWF0ZVJvb21Cc3QSIwoJcm9vbV9pbmZvGAEgASgLMhAubGFnYW1lLlJv",
            "b21JbmZvIjUKDkRlc3Ryb3lSb29tQnN0EiMKCXJvb21faW5mbxgBIAEoCzIQ",
            "LmxhZ2FtZS5Sb29tSW5mbyJKCgtKb2luUm9vbUJzdBIjCglyb29tX2luZm8Y",
            "ASABKAsyEC5sYWdhbWUuUm9vbUluZm8SFgoOam9pbl9wbGF5ZXJfaWQYAiAB",
            "KAkiTAoMTGVhdmVSb29tQnN0EiMKCXJvb21faW5mbxgBIAEoCzIQLmxhZ2Ft",
            "ZS5Sb29tSW5mbxIXCg9sZWF2ZV9wbGF5ZXJfaWQYAiABKAkiUAoPUmVtb3Zl",
            "UGxheWVyQnN0EiMKCXJvb21faW5mbxgBIAEoCzIQLmxhZ2FtZS5Sb29tSW5m",
            "bxIYChByZW1vdmVfcGxheWVyX2lkGAIgASgJIjUKDkRpc21pc3NSb29tQnN0",
            "EiMKCXJvb21faW5mbxgBIAEoCzIQLmxhZ2FtZS5Sb29tSW5mbyI0Cg1DaGFu",
            "Z2VSb29tQnN0EiMKCXJvb21faW5mbxgBIAEoCzIQLmxhZ2FtZS5Sb29tSW5m",
            "byJJChFSZWN2RnJvbUNsaWVudEJzdBIPCgdyb29tX2lkGAEgASgJEhYKDnNl",
            "bmRfcGxheWVyX2lkGAIgASgJEgsKA21zZxgDIAEoCSJ6ChtDaGFuZ2VDdXN0",
            "b21QbGF5ZXJTdGF0dXNCc3QSGAoQY2hhbmdlX3BsYXllcl9pZBgBIAEoCRIc",
            "ChRjdXN0b21fcGxheWVyX3N0YXR1cxgCIAEoBBIjCglyb29tX2luZm8YAyAB",
            "KAsyEC5sYWdhbWUuUm9vbUluZm8iiQEKG0NoYW5nZVBsYXllck5ldHdvcmtT",
            "dGF0ZUJzdBIYChBjaGFuZ2VfcGxheWVyX2lkGAEgASgJEisKDW5ldHdvcmtf",
            "c3RhdGUYAiABKA4yFC5sYWdhbWUuTmV0d29ya1N0YXRlEiMKCXJvb21faW5m",
            "bxgDIAEoCzIQLmxhZ2FtZS5Sb29tSW5mbyJKCg9NYXRjaFRpbWVvdXRCc3QS",
            "JQoKbWF0Y2hfdHlwZRgBIAEoDjIRLmxhZ2FtZS5NYXRjaFR5cGUSEAoIZXJy",
            "X2NvZGUYAiABKAUiNwoOQ2FuY2VsTWF0Y2hCc3QSEgoKbWF0Y2hfY29kZRgB",
            "IAEoCRIRCglwbGF5ZXJfaWQYAiABKAkiXQoPTWF0Y2hQbGF5ZXJzQnN0EiUK",
            "Cm1hdGNoX3R5cGUYASABKA4yES5sYWdhbWUuTWF0Y2hUeXBlEiMKCXJvb21f",
            "aW5mbxgCIAEoCzIQLmxhZ2FtZS5Sb29tSW5mbyI4ChFTdGFydEZyYW1lU3lu",
            "Y0JzdBIjCglyb29tX2luZm8YASABKAsyEC5sYWdhbWUuUm9vbUluZm8iNwoQ",
            "U3RvcEZyYW1lU3luY0JzdBIjCglyb29tX2luZm8YASABKAsyEC5sYWdhbWUu",
            "Um9vbUluZm8iLAoMUmVjdkZyYW1lQnN0EhwKBWZyYW1lGAEgASgLMg0ubGFn",
            "YW1lLkZyYW1lIk4KFEdhbWVTdnJDb21tdW5pY2F0aW9uEigKBHR5cGUYASAB",
            "KA4yGi5sYWdhbWUuR2FtZVN2ckZvcndhcmRUeXBlEgwKBGJvZHkYAiABKAwi",
            "RQoYTm90aWZ5UmVsYXlDb25uZWN0aW9uUmVxEg8KB3Jvb21faWQYASABKAkS",
            "CgoCaXAYAiABKAkSDAoEcG9ydBgDIAEoDSJUChJOb3RpZnlSb29tRXZlbnRS",
            "ZXESMQoDY21kGAEgASgOMiQubGFnYW1lLlNlcnZlclNlbmRDbGllbnRCc3RX",
            "cmFwMlR5cGUSCwoDbXNnGAIgASgMIkQKEFNlbmRUb0dhbWVTdnJSZXESDwoH",
            "cm9vbV9pZBgBIAEoCRIRCglwbGF5ZXJfaWQYAiABKAkSDAoEZGF0YRgDIAEo",
            "CSISChBTZW5kVG9HYW1lU3ZyUnNwIlAKElJlY3ZGcm9tR2FtZVN2ckJzdBIP",
            "Cgdyb29tX2lkGAEgASgJEhsKE3JlY3ZfcGxheWVyX2lkX2xpc3QYAiADKAkS",
            "DAoEZGF0YRgDIAEoCSIaChhDbGllbnRSZWN2RnJvbUdhbWVTdnJSc3AqJwoO",
            "Q29ubmVjdGlvblR5cGUSCgoGQ09NTU9OEAASCQoFUkVMQVkQASqnBAocU2Vy",
            "dmVyU2VuZENsaWVudEJzdFdyYXAyVHlwZRIUChBFX1BVU0hfVFlQRV9URVNU",
            "EAASFQoRRV9QVVNIX1RZUEVfUkVMQVkQARIXChNFX1BVU0hfVFlQRV9HQU1F",
            "U1ZSEAISGQoVRV9QVVNIX1RZUEVfSk9JTl9ST09NEGQSGgoWRV9QVVNIX1RZ",
            "UEVfTEVBVkVfUk9PTRBlEhwKGEVfUFVTSF9UWVBFX0RJU01JU1NfUk9PTRBm",
            "Eh0KGUVfUFVTSF9UWVBFX1JFTU9WRV9QTEFZRVIQZxIkCiBFX1BVU0hfVFlQ",
            "RV9NT0RJRllfUk9PTV9QUk9QRVJUWRBoEh0KGUVfUFVTSF9UWVBFX05FVFdP",
            "UktfU1RBVEUQaRIZChVFX1BVU0hfVFlQRV9ST09NX0NIQVQQahIcChhFX1BV",
            "U0hfVFlQRV9QTEFZRVJfU1RBVEUQaxIaChZFX1BVU0hfVFlQRV9TVEFSVF9H",
            "QU1FEGwSGQoVRV9QVVNIX1RZUEVfU1RPUF9HQU1FEG0SGwoXRV9QVVNIX1RZ",
            "UEVfQ1JFQVRFX1JPT00QbhIcChhFX1BVU0hfVFlQRV9ERVNUUk9ZX1JPT00Q",
            "bxIeChlFX1BVU0hfVFlQRV9NQVRDSF9TVUNDRVNTEMgBEh4KGUVfUFVTSF9U",
            "WVBFX01BVENIX1RJTUVPVVQQyQESHQoYRV9QVVNIX1RZUEVfTUFUQ0hfQ0FO",
            "Q0VMEMoBKokLCghQcm90b0NtZBIRCg1FX0NNRF9JTlZBTElEEAASGAoURV9D",
            "TURfSEVBUlRfQkVBVF9SRVEQZBIZChVFX0NNRF9DSEVDS19MT0dJTl9SRVEQ",
            "ZRIbChdFX0NNRF9MT0dJTl9UT19ST09NX1JFURBmEh4KGkVfQ01EX0ZPUldB",
            "UkRfVE9fUkVMQVlfUkVREGcSFAoPRV9DTURfTE9HSU5fUkVREOgHEhUKEEVf",
            "Q01EX0xPR09VVF9SRVEQ6QcSEwoORV9DTURfQVVUSF9SRVEQ6gcSIQocRV9D",
            "TURfUVVFUllfQllfUExBWUVSX0lEX1JFURDrBxIfChpFX0NNRF9RVUVSWV9C",
            "WV9HQU1FX0lEX1JFURDsBxIeChlFX0NNRF9HRVRfUk9PTV9ERVRBSUxfUkVR",
            "ENEPEhgKE0VfQ01EX0pPSU5fUk9PTV9SRVEQ0g8SGAoTRV9DTURfUVVJVF9S",
            "T09NX1JFURDTDxIaChVFX0NNRF9DUkVBVEVfUk9PTV9SRVEQ1A8SGwoWRV9D",
            "TURfREVTVE9SWV9ST09NX1JFURDVDxIcChdFX0NNRF9SRU1PVkVfTUVNQkVS",
            "X1JFURDWDxIkCh9FX0NNRF9DSEFOR0VfUk9PTV9QUk9QRVJUSVNfUkVRENcP",
            "EhwKF0VfQ01EX0RJU1NNSVNTX1JPT01fUkVRENgPEiIKHUVfQ01EX0NIQU5H",
            "RV9QTEFZRVJfU1RBVEVfUkVRENkPEioKJUVfQ01EX0NIQU5HRV9QTEFZRVJf",
            "TkVUV09SS19TVEFURV9SRVEQ2g8SGAoTRV9DTURfUk9PTV9DSEFUX1JFURDb",
            "DxIfChpFX0NNRF9TVEFSVF9GUkFNRV9TWU5DX1JFURDcDxIeChlFX0NNRF9T",
            "VE9QX0ZSQU1FX1NZTkNfUkVREN0PEhwKF0VfQ01EX0dFVF9ST09NX0xJU1Rf",
            "UkVREN4PEiAKG0VfQ01EX1NWUl9SRU1PVkVfTUVNQkVSX1JFURDfDxIoCiNF",
            "X0NNRF9TVlJfQ0hBTkdFX1JPT01fUFJPUEVSVElTX1JFURDgDxImCiFFX0NN",
            "RF9TVlJfQ0hBTkdFX1BMQVlFUl9TVEFURV9SRVEQ4Q8SHwoaRV9DTURfR0VU",
            "X1JPT01fTElTVF9WMl9SRVEQ4g8SIAobRV9DTURfTUFUQ0hfUk9PTV9TSU1Q",
            "TEVfUkVRELkXEiAKG0VfQ01EX01BVENIX1VTRVJfU0lNUExFX1JFURC6FxIh",
            "ChxFX0NNRF9NQVRDSF9DQU5DRUxfTUFUQ0hfUkVRELsXEiEKHEVfQ01EX01B",
            "VENIX1JPT01fQ09NUExFWF9SRVEQvBcSIwoeRV9DTURfTUFUQ0hfUExBWUVS",
            "X0NPTVBMRVhfUkVREL0XEhoKFUVfQ01EX01BVENIX0dST1VQX1JFURC+FxIf",
            "ChpFX0NNRF9SRUxBWV9TRU5EX0ZSQU1FX1JFURCgHxIiCh1FX0NNRF9SRUxB",
            "WV9SRVFVRVNUX0ZSQU1FX1JFURChHxIqCiVFX0NNRF9SRUxBWV9DTElFTlRf",
            "U0VORFRPX0dBTUVTVlJfUkVREKIfEi0KKEVfQ01EX1JFTEFZX0NMSUVOVF9S",
            "RUNWX0ZST01fR0FNRVNWUl9SRVEQox8SGwoWRV9DTURfTk9USUZZX0pPSU5f",
            "Uk9PTRCIJxIbChZFX0NNRF9OT1RJRllfUVVJVF9ST09NEIknEh4KGUVfQ01E",
            "X05PVElGWV9ERVNUT1JZX1JPT00QiicSGwoWRV9DTURfTk9USUZZX05FVF9T",
            "VEFURRCLJxIdChhFX0NNRF9OT1RJRllfS0lDS19NRU1CRVIQjCcSJAofRV9D",
            "TURfR0VUX0FERFJfQllfUk9VVEVSX0lEX1JFURDwLirNNgoQUUFwcFByb3Rv",
            "RXJyQ29kZRIJCgVFQ19PSxAAEhIKDkVDX1JFUV9CQURfUEtHEAESEgoORUNf",
            "Q01EX0lOVkFMSUQQAhIVChFFQ19QQVJBTVNfSU5WQUxJRBADEhIKDkVDX0lO",
            "TkVSX0VSUk9SEAQSDwoLRUNfVElNRV9PVVQQBRISCg5FQ19TRVJWRVJfQlVT",
            "WRAGEg8KC0VDX05PX1JJR0hUEAcSHgoZRUNfQUNDRVNTX0NNRF9JTlZBTElE",
            "X0VSUhDIARIgChtFQ19BQ0NFU1NfQ01EX0dFVF9UT0tFTl9FUlIQyQESIwoe",
            "RUNfQUNDRVNTX0NNRF9UT0tFTl9QUkVfRVhQSVJFEMoBEiAKG0VDX0FDQ0VT",
            "U19DTURfSU5WQUxJRF9UT0tFThDLARIhChxFQ19BQ0NFU1NfUFVTSF9TRVJJ",
            "QUxJWkVfRVJSEMwBEiMKHkVDX0FDQ0VTU19MT0dJTl9CT0RZX1BBUlNFX0VS",
            "UhDNARIXChJFQ19BQ0NFU1NfQ09OTl9FUlIQzgESHAoXRUNfQUNDRVNTX0dF",
            "VF9SU19JUF9FUlIQzwESIAobRUNfQUNDRVNTX0FERF9DT01NX0NPTk5fRVJS",
            "ENABEiEKHEVDX0FDQ0VTU19BRERfSEVBUlRfQ09OTl9FUlIQ0QESIQocRUNf",
            "QUNDRVNTX0FERF9SRUxBWV9DT05OX0VSUhDSARIjCh5FQ19BQ0NFU1NfSEVB",
            "UlRfQk9EWV9QQVJTRV9FUlIQ0wESIwoeRUNfQUNDRVNTX0dFVF9DT01NX0NP",
            "Tk5FQ1RfRVJSENQBEiQKH0VDX0FDQ0VTU19HRVRfUkVMQVlfQ09OTkVDVF9F",
            "UlIQ1QESIAobRUNfQUNDRVNTX0FDQ0VTU19JTkZPX0VNUFRZENYBEiUKIEVD",
            "X0FDQ0VTU19QTEFZRVJfRFVQTElDQVRFX0xPR0lOENcBEiUKIEVDX0FDQ0VT",
            "U19OT0VfUkVMQVlfT1JfU1RBVEVfU1ZSENgBEh0KGEVDX1BMQVlFUl9HQU1F",
            "X05PVF9FWElTVBCQThIeChlFQ19QTEFZRVJfU0VDUkVUX0tFWV9GQUlMEJFO",
            "EhcKEkVDX1BMQVlFUl9TSUdOX0VSUhCSThIcChdFQ19QTEFZRVJfRFVQTElD",
            "QVRFX1JFURCTThIgChtFQ19QTEFZRVJfVElNRVNUQU1QX0lOVkFMSUQQlE4S",
            "IAobRUNfUExBWUVSX1FVRVJZX1BMQVlFUl9GQUlMEJVOEh4KGUVDX1BMQVlF",
            "Ul9BRERfUExBWUVSX0ZBSUwQlk4SHgoZRUNfUExBWUVSX1FVRVJZX0dBTUVf",
            "RkFJTBCXThIdChhFQ19QTEFZRVJfUkVDT1JEX05VTV9FUlIQmE4SHQoYRUNf",
            "UExBWUVSX0dFVF9UT0tFTl9GQUlMEJlOEh4KGUVDX1BMQVlFUl9UT0tFTl9O",
            "T1RfRVhJU1QQmk4SHAoXRUNfUExBWUVSX1RPS0VOX0lOVkFMSUQQm04SHwoa",
            "RUNfUExBWUVSX0NMRUFSX1RPS0VOX0ZBSUwQnE4SGAoTRUNfUExBWUVSX0xP",
            "Q0tfRkFJTBCdThIaChVFQ19QTEFZRVJfVU5MT0NLX0ZBSUwQnk4SHgoZRUNf",
            "UExBWUVSX1NBVkVfVE9LRU5fRkFJTBCfThIiChxFQ19ST09NX0NSRUFURV9O",
            "T19QRVJNSVNTSU9OEKCcARIjCh1FQ19ST09NX0RFU1RPUllfTk9fUEVSTUlT",
            "U0lPThChnAESIAoaRUNfUk9PTV9KT0lOX05PX1BFUk1JU1NJT04QopwBEikK",
            "I0VDX1JPT01fUkVNT1ZFX1BMQVlFUl9OT19QRVJNSVNTSU9OEKOcARIsCiZF",
            "Q19ST09NX01PRElGWV9QUk9QRVJUSUVTX05PX1BFTUlTU0lPThCknAESJAoe",
            "RUNfUk9PTV9ESVNTTUlTU19OT19QRVJNSVNTSU9OEKWcARInCiFFQ19ST09N",
            "X1JFTU9WRV9TRUxGX05PX1BFUk1JU1NJT04QppwBEiUKH0VDX1JPT01fQ0hF",
            "Q0tfTE9HSU5fU0VTU0lPTl9FUlIQp5wBEicKIUVDX1JPT01fUkVNT1ZFX1BM",
            "QVlFUl9OT1RfSU5fUk9PTRConAESJAoeRUNfUk9PTV9QTEFZRVJfQUxSRUFE",
            "WV9JTl9ST09NEKqcARIgChpFQ19ST09NX1BMQVlFUl9OT1RfSU5fUk9PTRCr",
            "nAESIgocRUNfUk9PTV9QTEFZRVJTX0VYQ0VFRF9MSU1JVBCsnAESHAoWRUNf",
            "Uk9PTV9KT0lOX05PVF9BTExPVxCtnAESIQobRUNfUk9PTV9NQVhfUExBWUVS",
            "U19JTlZBTElEEK6cARIZChNFQ19ST09NX0NSRUFURV9GQUlMEK+cARIcChZF",
            "Q19ST09NX1BMQVlFUl9PRkZMSU5FELCcARIgChpFQ19ST09NX1BBUkFNX1BB",
            "R0VfSU5WQUxJRBCxnAESIQobRUNfUk9PTV9HRVRfUExBWUVSX0lORk9fRVJS",
            "ENKcARIfChlFQ19ST09NX0dFVF9ST09NX0lORk9fRVJSENOcARIeChhFQ19S",
            "T09NX01PRElGWV9PV05FUl9FUlIQ1JwBEioKJEVDX1JPT01fTUFYX1JPT01f",
            "TlVNQkVSX0VYQ0VFRF9MSU1JVBDVnAESNwoqRUNfUk9PTV9SRU1PVkVfUkVE",
            "SVNfUExBWUVSX1JPT01fTUFUQ0hfRVJSEKzj/v///////wESLwoiRUNfUk9P",
            "TV9SRU1PVkVfUkVESVNfUk9PTV9JTkZPX0VSUhCr4/7///////8BEiUKGEVD",
            "X1JPT01fUkVESVNfVVBEQVRFX0VSUhCq4/7///////8BEicKGkVDX1JPT01f",
            "UkVESVNfR0VUX0xPQ0tfRVJSEKnj/v///////wESKQocRUNfUk9PTV9SRURJ",
            "U19DSEVDS19MT0NLX0VSUhCo4/7///////8BEicKGkVDX1JPT01fUkVESVNf",
            "REVMX0xPQ0tfRVJSEKfj/v///////wESHgoYRUNfUk9PTV9RVUVSWV9QTEFZ",
            "RVJfRVJSENycARIcChZFQ19ST09NX1FVRVJZX0dBTUVfRVJSEN2cARIjCh1F",
            "Q19ST09NX1BMQVlFUl9JTkZPX05PVF9FWElTVBDenAESIQobRUNfUk9PTV9H",
            "QU1FX0lORk9fTk9UX0VYSVNUEN+cARIsCh9FQ19ST09NX0hJU1RPUllfSU5G",
            "T19JTlNFUlRfRVJSEKDj/v///////wESIwodRUNfUk9PTV9SRUdJT05fSU5G",
            "T19OT1RfRVhJU1QQ4ZwBEh4KGEVDX1JPT01fUVVFUllfUkVHSU9OX0VSUhDi",
            "nAESIAoaRUNfUk9PTV9NT0RJRllfUExBWUVSX0JVU1kQ5pwBEhoKFEVDX1JP",
            "T01fSU5GT19VTkVYSVNUEPCcARIrCiVFQ19ST09NX0FMTE9DQVRFX1JFTEFZ",
            "U1ZSX0lQX1BPUlRfRVJSEPqcARIkCh5FQ19ST09NX0lOVkFMSURfUEFSQU1T",
            "X1RFQU1fSUQQhJ0BEiYKIEVDX1JPT01fVEVBTV9NRU1CRVJfTElNSVRfRVhD",
            "RUVEEIWdARIqCh1FQ19ST09NX0FMTE9DQVRFX1NFUlZJQ0VfRkFJTBCY4v7/",
            "//////8BEhYKEEVDX01BVENIX05PX1JPT00QsOoBEhYKEEVDX01BVENIX1RJ",
            "TUVPVVQQseoBEhgKEkVDX01BVENIX0xPR0lDX0VSUhCy6gESEgoMRUNfTUFU",
            "Q0hfRVJSELrqARIhChtFQ19NQVRDSF9QTEFZRVJfSVNfSU5fTUFUQ0gQu+oB",
            "EiIKHEVDX01BVENIX1BMQVlFUl9OT1RfSU5fTUFUQ0gQvOoBEiEKG0VDX01B",
            "VENIX0dFVF9NQVRDSF9JTkZPX0VSUhC96gESJAoeRUNfTUFUQ0hfVVBEQVRF",
            "X01BVENIX0lORk9fRVJSEL7qARIcChZFQ19NQVRDSF9DQU5DRUxfRkFJTEVE",
            "EL/qARInCiFFQ19NQVRDSF9HRVRfUExBWUVSX0xJU1RfSU5GT19FUlIQwOoB",
            "Eh4KGEVDX01BVENIX0NSRUFURV9ST09NX0VSUhDZ6gESHAoWRUNfTUFUQ0hf",
            "Sk9JTl9ST09NX0VSUhDa6gESHQoXRUNfTUFUQ0hfSU5WQUxJRF9QQVJBTVMQ",
            "2+oBEiUKH0VDX01BVENIX0dST1VQX05VTV9FWENFRURfTElNSVQQ3OoBEiQK",
            "HkVDX01BVENIX1BMQVlFUl9JRF9JU19SRVBFQVRFRBDd6gESMQorRUNfTUFU",
            "Q0hfQ1JFQVRFX1JPT01fUExBWUVSX0FMUkVBRFlfSU5fUk9PTRDi6gESHwoZ",
            "RUNfTUFUQ0hfUVVFUllfUExBWUVSX0VSUhCU6wESJAoeRUNfTUFUQ0hfUExB",
            "WUVSX0lORk9fTk9UX0VYSVNUEJXrARIdChdFQ19NQVRDSF9RVUVSWV9HQU1F",
            "X0VSUhCW6wESIgocRUNfTUFUQ0hfR0FNRV9JTkZPX05PVF9FWElTVBCX6wES",
            "HwoZRUNfTUFUQ0hfUVVFUllfUkVHSU9OX0VSUhCY6wESJAoeRUNfTUFUQ0hf",
            "UkVHSU9OX0lORk9fTk9UX0VYSVNUEJnrARIYChJFQ19NQVRDSF9URUFNX0ZB",
            "SUwQmusBEiQKHkVDX01BVENIX1BMQVlfUlVMRV9OT1RfUlVOTklORxCb6wES",
            "IgocRUNfTUFUQ0hfUExBWV9BVFRSX05PVF9GT1VORBCc6wESIgocRUNfTUFU",
            "Q0hfUExBWV9SVUxFX05PVF9GT1VORBCd6wESLwopRUNfTUFUQ0hfUExBWV9S",
            "VUxFX0FUVFJfU0VHTUVOVF9OT1RfRk9VTkQQnusBEiEKG0VDX01BVENIX1BM",
            "QVlfUlVMRV9GVU5DX0VSUhCf6wESIwodRUNfTUFUQ0hfR0VUX1BMQVlFUl9B",
            "VFRSX0ZBSUwQoOsBEiEKG0VDX01BVENIX0dFVF9URUFNX0FUVFJfRkFJTBCh",
            "6wESJQoYRUNfTUFUQ0hfSU5ORVJfTE9HSUNfRVJSELqU/v///////wESJgoZ",
            "RUNfTUFUQ0hfSU5ORVJfUEFSQU1TX0VSUhCwlP7///////8BEh0KF0VDX1JF",
            "TEFZX0FMUkVBRFlfRVhJU1RTEMC4AhIZChNFQ19SRUxBWV9OT1RfRVhJU1RT",
            "EMG4AhIiChxFQ19SRUxBWV9EQVRBX0VYQ0VFRF9MSU1JVEVEEMK4AhIkCh5F",
            "Q19SRUxBWV9NRU1CRVJfQUxSRUFEWV9FWElTVFMQw7gCEiAKGkVDX1JFTEFZ",
            "X01FTUJFUl9OT1RfRVhJU1RTEMS4AhIcChZFQ19SRUxBWV9TVEFURV9JTlZB",
            "TElEEMW4AhIhChtFQ19SRUxBWV9JTlZBTElEX0ZSQU1FX1JBVEUQxrgCEicK",
            "IUVDX1JFTEFZX1NFVF9GUkFNRV9SQVRFX0ZPUkJJRERFThDHuAISGQoTRUNf",
            "UkVMQVlfTk9fTUVNQkVSUxDIuAISJwohRUNfUkVMQVlfR0FNRVNWUl9TRVJW",
            "SUNFX05PVF9PUEVOEMm4AhIbChVFQ19SRUxBWV9SRVFfUE9EX0ZBSUwQyrgC",
            "Eh8KGUVDX1JFTEFZX05PX0FWQUlMQUJMRV9QT0QQy7gCEiMKHUVDX1JFTEFZ",
            "X0dFVF9GUkFNRV9DQUNIRV9GQUlMEMy4AhIeChhFQ19SRUxBWV9IS1ZfQ0FD",
            "SEVfRVJST1IQz7gCEiAKGkVDX1JFTEFZX1JFRElTX0NBQ0hFX0VSUk9SENC4",
            "AhImCiBFQ19SRUxBWV9OT1RJRllfUkVMQVlXT1JLRVJfRkFJTBDSuAISJAoe",
            "RUNfUkVMQVlfUkVTRVRfUkVMQVlfUk9PTV9GQUlMENO4AhIkCh5FQ19SRUxB",
            "WV9DTEVBTl9SRUxBWV9ST09NX0ZBSUwQ1LgCEhwKFkVDX1JFTEFZX05PX1BF",
            "Uk1JU1NJT04QpLkCEiIKHEVDX1JFTEFZX05PVElGWV9HQU1FU1ZSX0ZBSUwQ",
            "iLoCEiYKIEVDX1JFTEFZX0ZPUldBUkRfVE9fR0FNRVNWUl9GQUlMEIm6AhIl",
            "Ch9FQ19SRUxBWV9GT1JXQVJEX1RPX0NMSUVOVF9GQUlMEIq6AhIXChFFQ19J",
            "TlZBTElEX1BBUkFNUxDg1AMSKQojRUNfSU5WQUxJRF9QQVJBTVNfUExBWV9N",
            "T0RFX1ZFUlNJT04Q4dQDEioKJEVDX0lOVkFMSURfUEFSQU1TX1BMQVlfTU9E",
            "RV9SVUxFVFlQRRDi1AMSLAomRUNfSU5WQUxJRF9QQVJBTVNfUExBWV9NT0RF",
            "X0VYUFJFU1NJT04Q49QDEiYKIEVDX0lOVkFMSURfUEFSQU1TX1BMQVlfTU9E",
            "RV9URUFNEOTUAxIjCh1FQ19JTlZBTElEX1BBUkFNU19NU0dRX0VOQ09ERRD0",
            "1AMSIwodRUNfSU5WQUxJRF9QQVJBTVNfTVNHUV9ERUNPREUQ9dQDEh8KGUVD",
            "X0lOVkFMSURfUEFSQU1TX0dBTUVfSUQQyNwDEiMKHUVDX0lOVkFMSURfUEFS",
            "QU1TX1BMQVlFUl9JTkZPEMncAxIjCh1FQ19JTlZBTElEX1BBUkFNU19NQVhf",
            "UExBWUVSUxDK3AMSIQobRUNfSU5WQUxJRF9QQVJBTVNfUk9PTV9UWVBFEMvc",
            "AxIhChtFQ19JTlZBTElEX1BBUkFNU19QTEFZRVJfSUQQzNwDEiIKHEVDX0lO",
            "VkFMSURfUEFSQU1TX01BVENIX1RZUEUQzdwDEiIKHEVDX0lOVkFMSURfUEFS",
            "QU1TX01BVENIX0NPREUQztwDEh8KGUVDX0lOVkFMSURfUEFSQU1TX09QRU5f",
            "SUQQz9wDEiAKGkVDX0lOVkFMSURfUEFSQU1TX1BMQVRGT1JNENDcAxIhChtF",
            "Q19JTlZBTElEX1BBUkFNU19USU1FU1RBTVAQ0dwDEhwKFkVDX0lOVkFMSURf",
            "UEFSQU1TX1NJR04Q0twDEh0KF0VDX0lOVkFMSURfUEFSQU1TX05PTkNFENPc",
            "AxIdChdFQ19JTlZBTElEX1BBUkFNU19UT0tFThDU3AMSJQofRUNfSU5WQUxJ",
            "RF9QQVJBTVNfTkVUV09SS19TVEFURRDV3AMSIQobRUNfSU5WQUxJRF9QQVJB",
            "TVNfUk9PTV9OQU1FENbcAxIoCiJFQ19JTlZBTElEX1BBUkFNU19DUkVBVEVf",
            "Uk9PTV9UWVBFENfcAxIhChtFQ19JTlZBTElEX1BBUkFNU19ERVZJQ0VfSUQQ",
            "2NwDEh8KGUVDX0lOVkFMSURfUEFSQU1TX1BBR0VfTk8Q2dwDEiEKG0VDX0lO",
            "VkFMSURfUEFSQU1TX1BBR0VfU0laRRDa3AMSIwodRUNfSU5WQUxJRF9QQVJB",
            "TVNfUExBWUVSX0xJU1QQ29wDEh8KGUVDX0lOVkFMSURfUEFSQU1TX01FU1NB",
            "R0UQ3NwDEiMKHUVDX0lOVkFMSURfQ0hBTkdFX1JPT01fT1BUSU9OEN3cAxIg",
            "ChNFQ19NWVNQUF9TWVNURU1fRVJSEJj4/////////wESIwoWRUNfUkVESVNf",
            "S0VZX05PVF9FWElTVBCw/Pv///////8BEiAKE0VDX1JFRElTX1NFVF9PUF9F",
            "UlIQr/z7////////ARIgChNFQ19SRURJU19HRVRfT1BfRVJSEK78+///////",
            "/wESIAoTRUNfUkVESVNfREVMX09QX0VSUhCt/Pv///////8BEiMKFkVDX1JF",
            "RElTX0VYUElSRV9PUF9FUlIQrPz7////////ARIhChRFQ19SRURJU19MT0NL",
            "X09QX0VSUhCr/Pv///////8BEigKG0VDX1JFRElTX0xPQ0tfQUxSRUFEWV9F",
            "WElTVBCq/Pv///////8BEiEKFEVDX1JFRElTX0xJU1RfT1BfRVJSEJz8+///",
            "/////wESJAoXRUNfUkVESVNfTElTVF9QT1BfRU1QVFkQm/z7////////ARIs",
            "Ch9FQ19SRURJU19QT09MX0dFVF9JTlNUQU5DRV9GQUlMEJr8+////////wES",
            "IgoVRUNfUkVESVNfU0VUX0lTX0VNUFRZEJn8+////////wESJwoaRUNfUkVE",
            "SVNfT1BfSU5WQUxJRF9QQVJBTVMQmPz7////////ARIiChVFQ19NWVNRTF9O",
            "T19ST1dfRk9VTkQQzPv7////////ARIlChhFQ19NWVNRTF9NVUxUSV9ST1df",
            "Rk9VTkQQy/v7////////ARIhChRFQ19NWVNRTF9JTlNFUlRfRkFJTBDK+/v/",
            "//////8BEiEKFEVDX01ZU1FMX0RFTEVURV9GQUlMEMn7+////////wESIQoU",
            "RUNfTVlTUUxfVVBEQVRFX0ZBSUwQyPv7////////ARIhChRFQ19NWVNRTF9R",
            "VUVSWVNfRkFJTBDH+/v///////8BEicKGkVDX1BCX1NFUklBTElaRV9UT19T",
            "VFJfRVJSEOj6+////////wESJQoYRUNfUEJfUEFSU0VfRlJPTV9TVFJfRVJS",
            "EOf6+////////wESHwoSRUNfREFUQV9GT1JNQVRfRVJSEN76+////////wES",
            "HwoSRUNfSlNPTl9GT1JNQVRfRVJSEN36+////////wESKQocRUNfSlNPTl9Q",
            "TEFZX01PREVfRk9STUFUX0VSUhDc+vv///////8BEikKHEVDX0pTT05fUExB",
            "WV9NT0RFX1BBUklTRV9FUlIQ2/r7////////ARIoChtFQ19JTlZBTElEX1BB",
            "UkFNU19SRUNPUkVfSUQQ1/f7////////ARIaCg1FQ19IQVNISURfRVJSEPT2",
            "+////////wESIQoURUNfSEFTSElEX0VOQ09ERV9FUlIQ8/b7////////ARIh",
            "ChRFQ19IQVNISURfREVDT0RFX0VSUhDy9vv///////8BEicKGkVDX0NPTkZf",
            "Uk9PTV9JRF9CVUNLRVRfRVJSEI/2+////////wESFgoQRUNfU0RLX1NFTkRf",
            "RkFJTBCRvwUSEwoNRUNfU0RLX1VOSU5JVBCSvwUSGAoSRUNfU0RLX1JFU19U",
            "SU1FT1VUEJO/BRIVCg9FQ19TREtfTk9fTE9HSU4QlL8FEhsKFUVDX1NES19O",
            "T19DSEVDS19MT0dJThCVvwUSGQoTRUNfU0RLX1NPQ0tFVF9FUlJPUhCWvwUS",
            "GQoTRUNfU0RLX1NPQ0tFVF9DTE9TRRCXvwUSFAoORUNfU0RLX05PX1JPT00Q",
            "mL8FKloKDE5ldHdvcmtTdGF0ZRISCg5DT01NT05fT0ZGTElORRAAEhEKDUNP",
            "TU1PTl9PTkxJTkUQARIRCg1SRUxBWV9PRkZMSU5FEAISEAoMUkVMQVlfT05M",
            "SU5FEAMqNQoOQ3JlYXRlUm9vbVR5cGUSEQoNQ09NTU9OX0NSRUFURRAAEhAK",
            "DE1BVENIX0NSRUFURRABKiUKDkZyYW1lU3luY1N0YXRlEggKBFNUT1AQABIJ",
            "CgVTVEFSVBABKi8KDEpvaW5Sb29tVHlwZRIPCgtDT01NT05fSk9JThAAEg4K",
            "Ck1BVENIX0pPSU4QASqGAQoQQ2hhbmdlUm9vbU9wdGlvbhINCglST09NX05B",
            "TUUQABIJCgVPV05FUhABEg0KCUlTX1ZJRVdFRBACEg4KCklTX0lOVklURUQQ",
            "AxIOCgpJU19QUklWQVRFEAQSFQoRQ1VTVE9NX1BST1BFUlRJRVMQBRISCg5J",
            "U19GT1JCSURfSk9JThAGKkIKC01hdGNoU3RhdHVzEgsKB1BFTkRJTkcQABIM",
            "CghNQVRDSElORxABEgsKB1NVQ0NFU1MQAxILCgdUSU1FT1VUEAQqQwoJTWF0",
            "Y2hUeXBlEhEKDVBMQVlFUl9TSU1QTEUQABIPCgtST09NX1NJTVBMRRABEhIK",
            "DlBMQVlFUl9DT01QTEVYEAIq1QEKEkdhbWVTdnJGb3J3YXJkVHlwZRIcChhF",
            "X0dTX0ZPUldBUkRUWVBFX0RFRkFVTFQQABImCiJFX0dTX0ZPUldBUkRUWVBF",
            "X05PVElGWV9DT05ORUNUSU9OEAESJgoiRV9HU19GT1JXQVJEVFlQRV9OT1RJ",
            "RllfUk9PTV9FVkVOVBACEiUKIUVfR1NfRk9SV0FSRFRZUEVfTk9USUZZX0NP",
            "TV9FVkVOVBADEioKJkVfR1NfRk9SV0FSRFRZUEVfQ0xJRU5UX1NFTkRUT19H",
            "QU1FU1ZSEARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Lagame.ConnectionType), typeof(global::Lagame.ServerSendClientBstWrap2Type), typeof(global::Lagame.ProtoCmd), typeof(global::Lagame.QAppProtoErrCode), typeof(global::Lagame.NetworkState), typeof(global::Lagame.CreateRoomType), typeof(global::Lagame.FrameSyncState), typeof(global::Lagame.JoinRoomType), typeof(global::Lagame.ChangeRoomOption), typeof(global::Lagame.MatchStatus), typeof(global::Lagame.MatchType), typeof(global::Lagame.GameSvrForwardType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ClientSendServerReqWrap1), global::Lagame.ClientSendServerReqWrap1.Parser, new[]{ "Version", "AppName", "Cmd", "Seq", "ClientIp", "ServiceIp", "Business", "AuthKey", "AuthType", "AuthIp", "GameId", "Uid", "PlayerId", "Body" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ServerSendClientBstWrap1), global::Lagame.ServerSendClientBstWrap1.Parser, new[]{ "Version", "AppName", "Cmd", "Seq", "ClientIp", "ServiceIp", "Business", "AuthKey", "AuthType", "AuthIp", "GameId", "Uid", "PlayerId", "Body" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ClientSendServerRspWrap1), global::Lagame.ClientSendServerRspWrap1.Parser, new[]{ "Seq", "ErrCode", "ErrMsg", "Body" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ClientSendServerReqWrap2), global::Lagame.ClientSendServerReqWrap2.Parser, new[]{ "Cmd", "Body" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ClientSendServerRspWrap2), global::Lagame.ClientSendServerRspWrap2.Parser, new[]{ "Body" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.HeartBeatReq), global::Lagame.HeartBeatReq.Parser, new[]{ "ConType", "RouteId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.HeartBeatRsp), global::Lagame.HeartBeatRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ServerSendClientBstWrap2), global::Lagame.ServerSendClientBstWrap2.Parser, new[]{ "Type", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.NOUSEServerSendClientBstRspWrap2), global::Lagame.NOUSEServerSendClientBstRspWrap2.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.CheckLoginReq), global::Lagame.CheckLoginReq.Parser, new[]{ "Token", "RouteId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.CheckLoginRsp), global::Lagame.CheckLoginRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.PushBodyType), global::Lagame.PushBodyType.Parser, new[]{ "PushMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.LoginReq), global::Lagame.LoginReq.Parser, new[]{ "GameId", "OpenId", "Platform", "Channel", "Nonce", "Timestamp", "Sign", "DeviceId", "Mac", "Imei" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.LoginRsp), global::Lagame.LoginRsp.Parser, new[]{ "Token", "PlayerId", "ExpireTime", "SdkConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SdkConfig), global::Lagame.SdkConfig.Parser, new[]{ "PingInterval", "ReportInterval", "ServerTime", "EnableUdp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.LogoutReq), global::Lagame.LogoutReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.LogoutRsp), global::Lagame.LogoutRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.StartFrameSyncReq), global::Lagame.StartFrameSyncReq.Parser, new[]{ "RoomId", "GameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.StartFrameSyncRsp), global::Lagame.StartFrameSyncRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.StopFrameSyncReq), global::Lagame.StopFrameSyncReq.Parser, new[]{ "RoomId", "GameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.StopFrameSyncRsp), global::Lagame.StopFrameSyncRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.FrameItem), global::Lagame.FrameItem.Parser, new[]{ "PlayerId", "Data", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SendFrameReq), global::Lagame.SendFrameReq.Parser, new[]{ "RoomId", "Item" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SendFrameRsp), global::Lagame.SendFrameRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.FrameExtInfo), global::Lagame.FrameExtInfo.Parser, new[]{ "Seed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.Frame), global::Lagame.Frame.Parser, new[]{ "Id", "Items", "Ext" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RequestFrameReq), global::Lagame.RequestFrameReq.Parser, new[]{ "RoomId", "BeginFrameId", "EndFrameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RequestFrameRsp), global::Lagame.RequestFrameRsp.Parser, new[]{ "Frames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.PlayerInfo), global::Lagame.PlayerInfo.Parser, new[]{ "Id", "Name", "TeamId", "CustomPlayerStatus", "CustomProfile", "CommonNetworkState", "RelayNetworkState", "IsRobot", "MatchAttributes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.TeamInfo), global::Lagame.TeamInfo.Parser, new[]{ "Id", "Name", "MinPlayers", "MaxPlayers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RoomInfo), global::Lagame.RoomInfo.Parser, new[]{ "Id", "Name", "Type", "CreateType", "MaxPlayers", "Owner", "IsPrivate", "CustomProperties", "PlayerList", "TeamList", "FrameSyncState", "FrameRate", "RouteId", "CreateTime", "StartGameTime", "IsForbidJoin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.CreateRoomReq), global::Lagame.CreateRoomReq.Parser, new[]{ "RoomName", "RoomType", "CreateType", "MaxPlayers", "IsPrivate", "CustomProperties", "PlayerInfo", "Region", "Owner", "PlayerList", "TeamList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.CreateRoomRsp), global::Lagame.CreateRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.JoinRoomReq), global::Lagame.JoinRoomReq.Parser, new[]{ "RoomId", "TeamId", "JoinType", "PlayerInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.JoinRoomRsp), global::Lagame.JoinRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.LeaveRoomReq), global::Lagame.LeaveRoomReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.LeaveRoomRsp), global::Lagame.LeaveRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.DismissRoomReq), global::Lagame.DismissRoomReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.DismissRoomRsp), global::Lagame.DismissRoomRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangeRoomReq), global::Lagame.ChangeRoomReq.Parser, new[]{ "RoomName", "Owner", "IsPrivate", "CustomProperties", "IsForbidJoin", "ChangeRoomOptionList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangeRoomRsp), global::Lagame.ChangeRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SvrChangeRoomReq), global::Lagame.SvrChangeRoomReq.Parser, new[]{ "RoomName", "Owner", "IsPrivate", "CustomProperties", "IsForbidJoin", "RoomId", "ChangeRoomOptionList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SvrChangeRoomRsp), global::Lagame.SvrChangeRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RemovePlayerReq), global::Lagame.RemovePlayerReq.Parser, new[]{ "RemovePlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RemovePlayerRsp), global::Lagame.RemovePlayerRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SvrRemovePlayerReq), global::Lagame.SvrRemovePlayerReq.Parser, new[]{ "RoomId", "RemovePlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SvrRemovePlayerRsp), global::Lagame.SvrRemovePlayerRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.GetRoomByRoomIdReq), global::Lagame.GetRoomByRoomIdReq.Parser, new[]{ "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.GetRoomByRoomIdRsp), global::Lagame.GetRoomByRoomIdRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SendToClientReq), global::Lagame.SendToClientReq.Parser, new[]{ "RoomId", "RecvPlayerList", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SendToClientRsp), global::Lagame.SendToClientRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangeCustomPlayerStatusReq), global::Lagame.ChangeCustomPlayerStatusReq.Parser, new[]{ "CustomPlayerStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangeCustomPlayerStatusRsp), global::Lagame.ChangeCustomPlayerStatusRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SvrChangeCustomPlayerStatusReq), global::Lagame.SvrChangeCustomPlayerStatusReq.Parser, new[]{ "CustomPlayerStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SvrChangeCustomPlayerStatusRsp), global::Lagame.SvrChangeCustomPlayerStatusRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangePlayerNetworkStateReq), global::Lagame.ChangePlayerNetworkStateReq.Parser, new[]{ "NetworkState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangePlayerNetworkStateRsp), global::Lagame.ChangePlayerNetworkStateRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.GetRoomListReq), global::Lagame.GetRoomListReq.Parser, new[]{ "GameId", "PageNo", "PageSize", "RoomType", "IsDesc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.GetRoomListRsp), global::Lagame.GetRoomListRsp.Parser, new[]{ "GameId", "RoomList", "Total" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchRoomSimpleReq), global::Lagame.MatchRoomSimpleReq.Parser, new[]{ "RoomType", "MaxPlayers", "PlayerInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchRoomSimpleRsp), global::Lagame.MatchRoomSimpleRsp.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchRoomComplexReq), global::Lagame.MatchRoomComplexReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchRoomComplexRsp), global::Lagame.MatchRoomComplexRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchPlayersSimpleReq), global::Lagame.MatchPlayersSimpleReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchPlayersSimpleRsp), global::Lagame.MatchPlayersSimpleRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchAttribute), global::Lagame.MatchAttribute.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchPlayerInfo), global::Lagame.MatchPlayerInfo.Parser, new[]{ "Id", "Name", "CustomPlayerStatus", "CustomProfile", "MatchAttributes", "MatchStatus", "TeamId", "Region", "TeamLeader", "SdkVersion", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchGroupPlayerInfo), global::Lagame.MatchGroupPlayerInfo.Parser, new[]{ "Id", "Name", "CustomPlayerStatus", "CustomProfile", "MatchAttributes", "MatchStatus", "TeamId", "Region", "TeamLeader", "SdkVersion", "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchGroupInfo), global::Lagame.MatchGroupInfo.Parser, new[]{ "Id", "Leader", "PlayerIdList", "PlayerInfoList", "MatchAttributes", "Region", "SdkVersion", "TeamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchTeamInfo), global::Lagame.MatchTeamInfo.Parser, new[]{ "TeamId", "TeamName", "TeamLeader", "Members", "MatchAttributes", "MemberSdkVersions", "GroupIds", "GroupSdkVersions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchPlayersReq), global::Lagame.MatchPlayersReq.Parser, new[]{ "MatchCode", "PlayerInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchPlayersRsp), global::Lagame.MatchPlayersRsp.Parser, new[]{ "MatchCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchGroupReq), global::Lagame.MatchGroupReq.Parser, new[]{ "MatchCode", "PlayerInfoList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchGroupRsp), global::Lagame.MatchGroupRsp.Parser, new[]{ "MatchCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.CancelPlayerMatchReq), global::Lagame.CancelPlayerMatchReq.Parser, new[]{ "MatchType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.CancelPlayerMatchRsp), global::Lagame.CancelPlayerMatchRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.CreateRoomBst), global::Lagame.CreateRoomBst.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.DestroyRoomBst), global::Lagame.DestroyRoomBst.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.JoinRoomBst), global::Lagame.JoinRoomBst.Parser, new[]{ "RoomInfo", "JoinPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.LeaveRoomBst), global::Lagame.LeaveRoomBst.Parser, new[]{ "RoomInfo", "LeavePlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RemovePlayerBst), global::Lagame.RemovePlayerBst.Parser, new[]{ "RoomInfo", "RemovePlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.DismissRoomBst), global::Lagame.DismissRoomBst.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangeRoomBst), global::Lagame.ChangeRoomBst.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RecvFromClientBst), global::Lagame.RecvFromClientBst.Parser, new[]{ "RoomId", "SendPlayerId", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangeCustomPlayerStatusBst), global::Lagame.ChangeCustomPlayerStatusBst.Parser, new[]{ "ChangePlayerId", "CustomPlayerStatus", "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ChangePlayerNetworkStateBst), global::Lagame.ChangePlayerNetworkStateBst.Parser, new[]{ "ChangePlayerId", "NetworkState", "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchTimeoutBst), global::Lagame.MatchTimeoutBst.Parser, new[]{ "MatchType", "ErrCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.CancelMatchBst), global::Lagame.CancelMatchBst.Parser, new[]{ "MatchCode", "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.MatchPlayersBst), global::Lagame.MatchPlayersBst.Parser, new[]{ "MatchType", "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.StartFrameSyncBst), global::Lagame.StartFrameSyncBst.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.StopFrameSyncBst), global::Lagame.StopFrameSyncBst.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RecvFrameBst), global::Lagame.RecvFrameBst.Parser, new[]{ "Frame" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.GameSvrCommunication), global::Lagame.GameSvrCommunication.Parser, new[]{ "Type", "Body" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.NotifyRelayConnectionReq), global::Lagame.NotifyRelayConnectionReq.Parser, new[]{ "RoomId", "Ip", "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.NotifyRoomEventReq), global::Lagame.NotifyRoomEventReq.Parser, new[]{ "Cmd", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SendToGameSvrReq), global::Lagame.SendToGameSvrReq.Parser, new[]{ "RoomId", "PlayerId", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.SendToGameSvrRsp), global::Lagame.SendToGameSvrRsp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.RecvFromGameSvrBst), global::Lagame.RecvFromGameSvrBst.Parser, new[]{ "RoomId", "RecvPlayerIdList", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lagame.ClientRecvFromGameSvrRsp), global::Lagame.ClientRecvFromGameSvrRsp.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ConnectionType {
    /// <summary>
    ////通用
    /// </summary>
    [pbr::OriginalName("COMMON")] Common = 0,
    /// <summary>
    ////帧同步或状态同步
    /// </summary>
    [pbr::OriginalName("RELAY")] Relay = 1,
  }

  public enum ServerSendClientBstWrap2Type {
    /// <summary>
    //// 通用 (0-99)
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_TEST")] EPushTypeTest = 0,
    [pbr::OriginalName("E_PUSH_TYPE_RELAY")] EPushTypeRelay = 1,
    /// <summary>
    //// 后端自定义服务gamesvr推送
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_GAMESVR")] EPushTypeGamesvr = 2,
    /// <summary>
    //// 房间管理Push信息 (100-199)
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_JOIN_ROOM")] EPushTypeJoinRoom = 100,
    /// <summary>
    //// 离开房间广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_LEAVE_ROOM")] EPushTypeLeaveRoom = 101,
    /// <summary>
    //// 解散房间广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_DISMISS_ROOM")] EPushTypeDismissRoom = 102,
    /// <summary>
    //// 移除用户广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_REMOVE_PLAYER")] EPushTypeRemovePlayer = 103,
    /// <summary>
    //// 修改房间属性广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MODIFY_ROOM_PROPERTY")] EPushTypeModifyRoomProperty = 104,
    /// <summary>
    //// 网络状态广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_NETWORK_STATE")] EPushTypeNetworkState = 105,
    /// <summary>
    //// 房间聊天广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_ROOM_CHAT")] EPushTypeRoomChat = 106,
    /// <summary>
    //// 更改用户状态广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_PLAYER_STATE")] EPushTypePlayerState = 107,
    /// <summary>
    //// 开始游戏广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_START_GAME")] EPushTypeStartGame = 108,
    /// <summary>
    //// 结束游戏广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_STOP_GAME")] EPushTypeStopGame = 109,
    /// <summary>
    //// 创建房间 - 自定义服务逻辑
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_CREATE_ROOM")] EPushTypeCreateRoom = 110,
    /// <summary>
    //// 销毁房间 - 自定义服务逻辑
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_DESTROY_ROOM")] EPushTypeDestroyRoom = 111,
    /// <summary>
    //// 匹配Push信息 (200-299)
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MATCH_SUCCESS")] EPushTypeMatchSuccess = 200,
    /// <summary>
    //// 匹配超时广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MATCH_TIMEOUT")] EPushTypeMatchTimeout = 201,
    /// <summary>
    //// 玩家取消匹配广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MATCH_CANCEL")] EPushTypeMatchCancel = 202,
  }

  /// <summary>
  //// 对外命令字枚举类型（分段），由access_svr在diapatch层转换成string再透传到后端
  /// </summary>
  public enum ProtoCmd {
    /// <summary>
    //////////接入层 （100-999）//////////
    /// </summary>
    [pbr::OriginalName("E_CMD_INVALID")] ECmdInvalid = 0,
    /// <summary>
    //// 应用层心跳包
    /// </summary>
    [pbr::OriginalName("E_CMD_HEART_BEAT_REQ")] ECmdHeartBeatReq = 100,
    /// <summary>
    //// 检查登陆
    /// </summary>
    [pbr::OriginalName("E_CMD_CHECK_LOGIN_REQ")] ECmdCheckLoginReq = 101,
    /// <summary>
    //// 登录通知房间
    /// </summary>
    [pbr::OriginalName("E_CMD_LOGIN_TO_ROOM_REQ")] ECmdLoginToRoomReq = 102,
    /// <summary>
    //// 转发包到Relay
    /// </summary>
    [pbr::OriginalName("E_CMD_FORWARD_TO_RELAY_REQ")] ECmdForwardToRelayReq = 103,
    /// <summary>
    //////////用户中心 （1000-1999）/////////
    /// </summary>
    [pbr::OriginalName("E_CMD_LOGIN_REQ")] ECmdLoginReq = 1000,
    /// <summary>
    //// 登出
    /// </summary>
    [pbr::OriginalName("E_CMD_LOGOUT_REQ")] ECmdLogoutReq = 1001,
    /// <summary>
    //// 鉴权
    /// </summary>
    [pbr::OriginalName("E_CMD_AUTH_REQ")] ECmdAuthReq = 1002,
    /// <summary>
    //// 根据用户ID查询用户
    /// </summary>
    [pbr::OriginalName("E_CMD_QUERY_BY_PLAYER_ID_REQ")] ECmdQueryByPlayerIdReq = 1003,
    /// <summary>
    //// 根据game_id player_id 询用户
    /// </summary>
    [pbr::OriginalName("E_CMD_QUERY_BY_GAME_ID_REQ")] ECmdQueryByGameIdReq = 1004,
    /// <summary>
    //////////房间类 （2000-2999）///////
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_ROOM_DETAIL_REQ")] ECmdGetRoomDetailReq = 2001,
    /// <summary>
    //// 加入指定房间
    /// </summary>
    [pbr::OriginalName("E_CMD_JOIN_ROOM_REQ")] ECmdJoinRoomReq = 2002,
    /// <summary>
    //// 退出房间
    /// </summary>
    [pbr::OriginalName("E_CMD_QUIT_ROOM_REQ")] ECmdQuitRoomReq = 2003,
    /// <summary>
    //// 创建房间
    /// </summary>
    [pbr::OriginalName("E_CMD_CREATE_ROOM_REQ")] ECmdCreateRoomReq = 2004,
    /// <summary>
    //// 销毁房间
    /// </summary>
    [pbr::OriginalName("E_CMD_DESTORY_ROOM_REQ")] ECmdDestoryRoomReq = 2005,
    /// <summary>
    //// 踢人
    /// </summary>
    [pbr::OriginalName("E_CMD_REMOVE_MEMBER_REQ")] ECmdRemoveMemberReq = 2006,
    /// <summary>
    //// 更改房间属性
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_ROOM_PROPERTIS_REQ")] ECmdChangeRoomPropertisReq = 2007,
    /// <summary>
    //// 解散房间
    /// </summary>
    [pbr::OriginalName("E_CMD_DISSMISS_ROOM_REQ")] ECmdDissmissRoomReq = 2008,
    /// <summary>
    //// 更改用户状态
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_PLAYER_STATE_REQ")] ECmdChangePlayerStateReq = 2009,
    /// <summary>
    //// 更改用户网络状态
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_PLAYER_NETWORK_STATE_REQ")] ECmdChangePlayerNetworkStateReq = 2010,
    /// <summary>
    //// 房间聊天
    /// </summary>
    [pbr::OriginalName("E_CMD_ROOM_CHAT_REQ")] ECmdRoomChatReq = 2011,
    /// <summary>
    //// 开始帧同步
    /// </summary>
    [pbr::OriginalName("E_CMD_START_FRAME_SYNC_REQ")] ECmdStartFrameSyncReq = 2012,
    /// <summary>
    //// 停止帧同步
    /// </summary>
    [pbr::OriginalName("E_CMD_STOP_FRAME_SYNC_REQ")] ECmdStopFrameSyncReq = 2013,
    /// <summary>
    //// 查询房间列表 - 老接口 select_room_list_handler
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_ROOM_LIST_REQ")] ECmdGetRoomListReq = 2014,
    /// <summary>
    //// 服务端踢人
    /// </summary>
    [pbr::OriginalName("E_CMD_SVR_REMOVE_MEMBER_REQ")] ECmdSvrRemoveMemberReq = 2015,
    /// <summary>
    //// 服务端更改房间属性
    /// </summary>
    [pbr::OriginalName("E_CMD_SVR_CHANGE_ROOM_PROPERTIS_REQ")] ECmdSvrChangeRoomPropertisReq = 2016,
    /// <summary>
    //// 服务端更改用户状态
    /// </summary>
    [pbr::OriginalName("E_CMD_SVR_CHANGE_PLAYER_STATE_REQ")] ECmdSvrChangePlayerStateReq = 2017,
    /// <summary>
    //// 查询房间列表 - 新接口 get_room_list_handler
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_ROOM_LIST_V2_REQ")] ECmdGetRoomListV2Req = 2018,
    /// <summary>
    //////////匹配服务类 （3000-3999）/////////
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_ROOM_SIMPLE_REQ")] ECmdMatchRoomSimpleReq = 3001,
    /// <summary>
    //// 简单在线匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_USER_SIMPLE_REQ")] ECmdMatchUserSimpleReq = 3002,
    /// <summary>
    //// 取消匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_CANCEL_MATCH_REQ")] ECmdMatchCancelMatchReq = 3003,
    /// <summary>
    //// 复杂房间匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_ROOM_COMPLEX_REQ")] ECmdMatchRoomComplexReq = 3004,
    /// <summary>
    //// 复杂在线匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_PLAYER_COMPLEX_REQ")] ECmdMatchPlayerComplexReq = 3005,
    /// <summary>
    //// 组队匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_GROUP_REQ")] ECmdMatchGroupReq = 3006,
    /// <summary>
    //////////帧同步或状态同步 （4000-4999）/////////
    /// </summary>
    [pbr::OriginalName("E_CMD_RELAY_SEND_FRAME_REQ")] ECmdRelaySendFrameReq = 4000,
    /// <summary>
    //// 补帧
    /// </summary>
    [pbr::OriginalName("E_CMD_RELAY_REQUEST_FRAME_REQ")] ECmdRelayRequestFrameReq = 4001,
    /// <summary>
    //// sdk发消息给自定义扩展服务gamesvr
    /// </summary>
    [pbr::OriginalName("E_CMD_RELAY_CLIENT_SENDTO_GAMESVR_REQ")] ECmdRelayClientSendtoGamesvrReq = 4002,
    /// <summary>
    //// 自定义扩展服务gamesvr给客户端发送消息
    /// </summary>
    [pbr::OriginalName("E_CMD_RELAY_CLIENT_RECV_FROM_GAMESVR_REQ")] ECmdRelayClientRecvFromGamesvrReq = 4003,
    /// <summary>
    //////////消息或事件推送（5000-5999）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_JOIN_ROOM")] ECmdNotifyJoinRoom = 5000,
    /// <summary>
    //// 退房事件广播（通知回调）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_QUIT_ROOM")] ECmdNotifyQuitRoom = 5001,
    /// <summary>
    //// 销毁房间广播（通知回调）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_DESTORY_ROOM")] ECmdNotifyDestoryRoom = 5002,
    /// <summary>
    //// 网络状态广播（通知回调）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_NET_STATE")] ECmdNotifyNetState = 5003,
    /// <summary>
    //// 踢人广播（通知回调）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_KICK_MEMBER")] ECmdNotifyKickMember = 5004,
    /// <summary>
    //////////Ctrl类 （6000-6999）/////////
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_ADDR_BY_ROUTER_ID_REQ")] ECmdGetAddrByRouterIdReq = 6000,
  }

  /// <summary>
  ////QApp协议系统逻辑错误码(号段0~10000),业务错误码(10001~0xFFFFFFFF)
  ////10000～19999 用户中心
  ////20000～29999 房间管理
  ////30000～39999 匹配服务
  ////40000～49999 帧同步服务
  ////50000～59999 调度中心
  ////60000～69999 业务参数错误
  ////-60000～69999  负数 - 系统内部错误，统一提示系统错误
  ////90000～99999 预留给客户端
  /// </summary>
  public enum QAppProtoErrCode {
    /// <summary>
    ////系统框架错误
    /// </summary>
    [pbr::OriginalName("EC_OK")] EcOk = 0,
    /// <summary>
    //// 请求包格式错误
    /// </summary>
    [pbr::OriginalName("EC_REQ_BAD_PKG")] EcReqBadPkg = 1,
    /// <summary>
    //// 非法命令字
    /// </summary>
    [pbr::OriginalName("EC_CMD_INVALID")] EcCmdInvalid = 2,
    /// <summary>
    //// 参数错误
    /// </summary>
    [pbr::OriginalName("EC_PARAMS_INVALID")] EcParamsInvalid = 3,
    /// <summary>
    //// 服务器内部错误
    /// </summary>
    [pbr::OriginalName("EC_INNER_ERROR")] EcInnerError = 4,
    /// <summary>
    //// 后端超时错误
    /// </summary>
    [pbr::OriginalName("EC_TIME_OUT")] EcTimeOut = 5,
    /// <summary>
    //// 服务器繁忙
    /// </summary>
    [pbr::OriginalName("EC_SERVER_BUSY")] EcServerBusy = 6,
    /// <summary>
    //// 没有权限请求
    /// </summary>
    [pbr::OriginalName("EC_NO_RIGHT")] EcNoRight = 7,
    /// <summary>
    ////接入层错误码
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CMD_INVALID_ERR")] EcAccessCmdInvalidErr = 200,
    /// <summary>
    //// 获取Token失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CMD_GET_TOKEN_ERR")] EcAccessCmdGetTokenErr = 201,
    /// <summary>
    //// Token即将过期
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CMD_TOKEN_PRE_EXPIRE")] EcAccessCmdTokenPreExpire = 202,
    /// <summary>
    //// Token无效或过期
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CMD_INVALID_TOKEN")] EcAccessCmdInvalidToken = 203,
    /// <summary>
    //// PUSH序列化包失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_PUSH_SERIALIZE_ERR")] EcAccessPushSerializeErr = 204,
    /// <summary>
    //// 登陆用户中心回包解析出错
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_LOGIN_BODY_PARSE_ERR")] EcAccessLoginBodyParseErr = 205,
    /// <summary>
    //// 查找连接信息出错
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CONN_ERR")] EcAccessConnErr = 206,
    /// <summary>
    //// 获取Relay的RS_IP或RS_PORT出错
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_GET_RS_IP_ERR")] EcAccessGetRsIpErr = 207,
    /// <summary>
    //// 添加COMM连接信息失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_ADD_COMM_CONN_ERR")] EcAccessAddCommConnErr = 208,
    /// <summary>
    //// 添加心跳连接信息失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_ADD_HEART_CONN_ERR")] EcAccessAddHeartConnErr = 209,
    /// <summary>
    //// 添加Relay连接信息失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_ADD_RELAY_CONN_ERR")] EcAccessAddRelayConnErr = 210,
    /// <summary>
    //// 心跳包解析出错
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_HEART_BODY_PARSE_ERR")] EcAccessHeartBodyParseErr = 211,
    /// <summary>
    //// 获取COMM连接信息失效
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_GET_COMM_CONNECT_ERR")] EcAccessGetCommConnectErr = 212,
    /// <summary>
    //// 获取RELAY连接信息失效
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_GET_RELAY_CONNECT_ERR")] EcAccessGetRelayConnectErr = 213,
    /// <summary>
    //// 连接信息为空
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_ACCESS_INFO_EMPTY")] EcAccessAccessInfoEmpty = 214,
    /// <summary>
    //// 用户已经登录，不能重复登录
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_PLAYER_DUPLICATE_LOGIN")] EcAccessPlayerDuplicateLogin = 215,
    /// <summary>
    //// 转发SVR名字错误，不是relay_svr或state_svr
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_NOE_RELAY_OR_STATE_SVR")] EcAccessNoeRelayOrStateSvr = 216,
    /// <summary>
    ////用户中心错误（10000～19999）
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_GAME_NOT_EXIST")] EcPlayerGameNotExist = 10000,
    /// <summary>
    //// 查询secret_key失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_SECRET_KEY_FAIL")] EcPlayerSecretKeyFail = 10001,
    /// <summary>
    //// sign校验失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_SIGN_ERR")] EcPlayerSignErr = 10002,
    /// <summary>
    //// 重复请求
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_DUPLICATE_REQ")] EcPlayerDuplicateReq = 10003,
    /// <summary>
    //// timestamp非法
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_TIMESTAMP_INVALID")] EcPlayerTimestampInvalid = 10004,
    /// <summary>
    //// 查询用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_QUERY_PLAYER_FAIL")] EcPlayerQueryPlayerFail = 10005,
    /// <summary>
    //// 新增用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_ADD_PLAYER_FAIL")] EcPlayerAddPlayerFail = 10006,
    /// <summary>
    //// 查询game信息失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_QUERY_GAME_FAIL")] EcPlayerQueryGameFail = 10007,
    /// <summary>
    //// 用户记录数不正确
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_RECORD_NUM_ERR")] EcPlayerRecordNumErr = 10008,
    /// <summary>
    //// 查询token失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_GET_TOKEN_FAIL")] EcPlayerGetTokenFail = 10009,
    /// <summary>
    //// token不存在
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_TOKEN_NOT_EXIST")] EcPlayerTokenNotExist = 10010,
    /// <summary>
    //// token非法
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_TOKEN_INVALID")] EcPlayerTokenInvalid = 10011,
    /// <summary>
    //// 清除token缓存失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_CLEAR_TOKEN_FAIL")] EcPlayerClearTokenFail = 10012,
    /// <summary>
    //// 获取分布式锁失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_LOCK_FAIL")] EcPlayerLockFail = 10013,
    /// <summary>
    //// 释放分布式锁失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_UNLOCK_FAIL")] EcPlayerUnlockFail = 10014,
    /// <summary>
    //// 保存token缓存失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_SAVE_TOKEN_FAIL")] EcPlayerSaveTokenFail = 10015,
    /// <summary>
    ////房间管理类错误（20000-29999）
    /// </summary>
    [pbr::OriginalName("EC_ROOM_CREATE_NO_PERMISSION")] EcRoomCreateNoPermission = 20000,
    /// <summary>
    //// 销毁房间无权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_DESTORY_NO_PERMISSION")] EcRoomDestoryNoPermission = 20001,
    /// <summary>
    //// 无权限加入房间
    /// </summary>
    [pbr::OriginalName("EC_ROOM_JOIN_NO_PERMISSION")] EcRoomJoinNoPermission = 20002,
    /// <summary>
    //// 无踢人权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_PLAYER_NO_PERMISSION")] EcRoomRemovePlayerNoPermission = 20003,
    /// <summary>
    //// 无修改房间属性权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MODIFY_PROPERTIES_NO_PEMISSION")] EcRoomModifyPropertiesNoPemission = 20004,
    /// <summary>
    //// 无解散房间权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_DISSMISS_NO_PERMISSION")] EcRoomDissmissNoPermission = 20005,
    /// <summary>
    //// 无踢出自己权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_SELF_NO_PERMISSION")] EcRoomRemoveSelfNoPermission = 20006,
    /// <summary>
    //// 检查登录失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_CHECK_LOGIN_SESSION_ERR")] EcRoomCheckLoginSessionErr = 20007,
    /// <summary>
    //// 被踢玩家不在房间中
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_PLAYER_NOT_IN_ROOM")] EcRoomRemovePlayerNotInRoom = 20008,
    /// <summary>
    //// 用户已经在房间内，不能操作创建房间、加房等操作
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYER_ALREADY_IN_ROOM")] EcRoomPlayerAlreadyInRoom = 20010,
    /// <summary>
    //// 用户目前不在房间内，不能操作更改房间属性、踢人等操作
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYER_NOT_IN_ROOM")] EcRoomPlayerNotInRoom = 20011,
    /// <summary>
    //// 房间内用户数已经达到最大人数不能再加入了
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYERS_EXCEED_LIMIT")] EcRoomPlayersExceedLimit = 20012,
    /// <summary>
    //// 房间不允许加入用户
    /// </summary>
    [pbr::OriginalName("EC_ROOM_JOIN_NOT_ALLOW")] EcRoomJoinNotAllow = 20013,
    /// <summary>
    //// 最大用户数值设置非法
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MAX_PLAYERS_INVALID")] EcRoomMaxPlayersInvalid = 20014,
    /// <summary>
    //// 创建房间失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_CREATE_FAIL")] EcRoomCreateFail = 20015,
    /// <summary>
    //// 用户在房间中掉线，不能开始游戏等操作
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYER_OFFLINE")] EcRoomPlayerOffline = 20016,
    /// <summary>
    //// 页号、页数大小参数不合法，可能实际大小没这么大
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PARAM_PAGE_INVALID")] EcRoomParamPageInvalid = 20017,
    /// <summary>
    //// 查询用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_GET_PLAYER_INFO_ERR")] EcRoomGetPlayerInfoErr = 20050,
    /// <summary>
    //// 获取房间信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_GET_ROOM_INFO_ERR")] EcRoomGetRoomInfoErr = 20051,
    /// <summary>
    //// 修改房主失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MODIFY_OWNER_ERR")] EcRoomModifyOwnerErr = 20052,
    /// <summary>
    //// 房间数量超过限制
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MAX_ROOM_NUMBER_EXCEED_LIMIT")] EcRoomMaxRoomNumberExceedLimit = 20053,
    /// <summary>
    //// 删除用户房间映射表信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_REDIS_PLAYER_ROOM_MATCH_ERR")] EcRoomRemoveRedisPlayerRoomMatchErr = -20052,
    /// <summary>
    //// 删除房间信息表信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_REDIS_ROOM_INFO_ERR")] EcRoomRemoveRedisRoomInfoErr = -20053,
    /// <summary>
    //// 数据库更新失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REDIS_UPDATE_ERR")] EcRoomRedisUpdateErr = -20054,
    /// <summary>
    //// 获取锁失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REDIS_GET_LOCK_ERR")] EcRoomRedisGetLockErr = -20055,
    /// <summary>
    //// 检查锁失败，一般是过期
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REDIS_CHECK_LOCK_ERR")] EcRoomRedisCheckLockErr = -20056,
    /// <summary>
    //// 删除锁失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REDIS_DEL_LOCK_ERR")] EcRoomRedisDelLockErr = -20057,
    /// <summary>
    //// 查询用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_QUERY_PLAYER_ERR")] EcRoomQueryPlayerErr = 20060,
    /// <summary>
    //// 游戏信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_QUERY_GAME_ERR")] EcRoomQueryGameErr = 20061,
    /// <summary>
    //// 用户信息不存在
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYER_INFO_NOT_EXIST")] EcRoomPlayerInfoNotExist = 20062,
    /// <summary>
    //// 游戏信息不存在
    /// </summary>
    [pbr::OriginalName("EC_ROOM_GAME_INFO_NOT_EXIST")] EcRoomGameInfoNotExist = 20063,
    /// <summary>
    //// mysql数据库插入历史房间信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_HISTORY_INFO_INSERT_ERR")] EcRoomHistoryInfoInsertErr = -20064,
    /// <summary>
    //// 查询不到accessRegion信息
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REGION_INFO_NOT_EXIST")] EcRoomRegionInfoNotExist = 20065,
    /// <summary>
    //// 查询地域信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_QUERY_REGION_ERR")] EcRoomQueryRegionErr = 20066,
    /// <summary>
    //// 操作冲突 需要重试 20070-20079
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MODIFY_PLAYER_BUSY")] EcRoomModifyPlayerBusy = 20070,
    /// <summary>
    //// 房间信息不存在
    /// </summary>
    [pbr::OriginalName("EC_ROOM_INFO_UNEXIST")] EcRoomInfoUnexist = 20080,
    /// <summary>
    //// ctrlsvr分配relaysvr失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_ALLOCATE_RELAYSVR_IP_PORT_ERR")] EcRoomAllocateRelaysvrIpPortErr = 20090,
    /// <summary>
    ////teams
    /// </summary>
    [pbr::OriginalName("EC_ROOM_INVALID_PARAMS_TEAM_ID")] EcRoomInvalidParamsTeamId = 20100,
    /// <summary>
    //// 房间团队人员已满
    /// </summary>
    [pbr::OriginalName("EC_ROOM_TEAM_MEMBER_LIMIT_EXCEED")] EcRoomTeamMemberLimitExceed = 20101,
    /// <summary>
    //// room service op 20200
    /// </summary>
    [pbr::OriginalName("EC_ROOM_ALLOCATE_SERVICE_FAIL")] EcRoomAllocateServiceFail = -20200,
    /// <summary>
    ////匹配服务类错误 （30000～39999）
    /// </summary>
    [pbr::OriginalName("EC_MATCH_NO_ROOM")] EcMatchNoRoom = 30000,
    /// <summary>
    //// 匹配超时
    /// </summary>
    [pbr::OriginalName("EC_MATCH_TIMEOUT")] EcMatchTimeout = 30001,
    /// <summary>
    //// 匹配逻辑错误
    /// </summary>
    [pbr::OriginalName("EC_MATCH_LOGIC_ERR")] EcMatchLogicErr = 30002,
    /// <summary>
    //// 匹配失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_ERR")] EcMatchErr = 30010,
    /// <summary>
    //// 用户已经在匹配中
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_IS_IN_MATCH")] EcMatchPlayerIsInMatch = 30011,
    /// <summary>
    //// 用户不在匹配状态
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_NOT_IN_MATCH")] EcMatchPlayerNotInMatch = 30012,
    /// <summary>
    //// 获取匹配信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GET_MATCH_INFO_ERR")] EcMatchGetMatchInfoErr = 30013,
    /// <summary>
    //// 更新匹配信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_UPDATE_MATCH_INFO_ERR")] EcMatchUpdateMatchInfoErr = 30014,
    /// <summary>
    //// 取消匹配失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_CANCEL_FAILED")] EcMatchCancelFailed = 30015,
    /// <summary>
    //// 查询匹配队列信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GET_PLAYER_LIST_INFO_ERR")] EcMatchGetPlayerListInfoErr = 30016,
    /// <summary>
    //// 匹配创建房间失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_CREATE_ROOM_ERR")] EcMatchCreateRoomErr = 30041,
    /// <summary>
    //// 匹配加入房间失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_JOIN_ROOM_ERR")] EcMatchJoinRoomErr = 30042,
    /// <summary>
    //// 匹配无效参数
    /// </summary>
    [pbr::OriginalName("EC_MATCH_INVALID_PARAMS")] EcMatchInvalidParams = 30043,
    /// <summary>
    //// 匹配小组人数超过队伍上限
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GROUP_NUM_EXCEED_LIMIT")] EcMatchGroupNumExceedLimit = 30044,
    /// <summary>
    //// 匹配小组中玩家ID重复
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_ID_IS_REPEATED")] EcMatchPlayerIdIsRepeated = 30045,
    /// <summary>
    //// 匹配创房 有玩家已经在房间中
    /// </summary>
    [pbr::OriginalName("EC_MATCH_CREATE_ROOM_PLAYER_ALREADY_IN_ROOM")] EcMatchCreateRoomPlayerAlreadyInRoom = 30050,
    /// <summary>
    //// 查询用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_QUERY_PLAYER_ERR")] EcMatchQueryPlayerErr = 30100,
    /// <summary>
    //// 用户信息不存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_INFO_NOT_EXIST")] EcMatchPlayerInfoNotExist = 30101,
    /// <summary>
    //// 查询游戏信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_QUERY_GAME_ERR")] EcMatchQueryGameErr = 30102,
    /// <summary>
    //// 游戏信息不存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GAME_INFO_NOT_EXIST")] EcMatchGameInfoNotExist = 30103,
    /// <summary>
    //// 查询大区信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_QUERY_REGION_ERR")] EcMatchQueryRegionErr = 30104,
    /// <summary>
    //// 无大区信息
    /// </summary>
    [pbr::OriginalName("EC_MATCH_REGION_INFO_NOT_EXIST")] EcMatchRegionInfoNotExist = 30105,
    /// <summary>
    //// 团队匹配失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_TEAM_FAIL")] EcMatchTeamFail = 30106,
    /// <summary>
    //// 匹配规则不可用
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_RULE_NOT_RUNNING")] EcMatchPlayRuleNotRunning = 30107,
    /// <summary>
    //// 匹配参数不完整
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_ATTR_NOT_FOUND")] EcMatchPlayAttrNotFound = 30108,
    /// <summary>
    //// 匹配规则不存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_RULE_NOT_FOUND")] EcMatchPlayRuleNotFound = 30109,
    /// <summary>
    //// 匹配规则获取属性匹配区间失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_RULE_ATTR_SEGMENT_NOT_FOUND")] EcMatchPlayRuleAttrSegmentNotFound = 30110,
    /// <summary>
    //// 匹配规则算法错误
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_RULE_FUNC_ERR")] EcMatchPlayRuleFuncErr = 30111,
    /// <summary>
    //// 匹配获取玩家属性失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GET_PLAYER_ATTR_FAIL")] EcMatchGetPlayerAttrFail = 30112,
    /// <summary>
    //// 匹配获取队伍属性失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GET_TEAM_ATTR_FAIL")] EcMatchGetTeamAttrFail = 30113,
    /// <summary>
    //// 匹配内部逻辑错误
    /// </summary>
    [pbr::OriginalName("EC_MATCH_INNER_LOGIC_ERR")] EcMatchInnerLogicErr = -30150,
    /// <summary>
    //// 匹配内部参数错误
    /// </summary>
    [pbr::OriginalName("EC_MATCH_INNER_PARAMS_ERR")] EcMatchInnerParamsErr = -30160,
    /// <summary>
    ////帧同步服务类错误（40000-49999）
    /// </summary>
    [pbr::OriginalName("EC_RELAY_ALREADY_EXISTS")] EcRelayAlreadyExists = 40000,
    /// <summary>
    ////服务不存在
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NOT_EXISTS")] EcRelayNotExists = 40001,
    /// <summary>
    ////data长度超限制
    /// </summary>
    [pbr::OriginalName("EC_RELAY_DATA_EXCEED_LIMITED")] EcRelayDataExceedLimited = 40002,
    /// <summary>
    ////成员已存在
    /// </summary>
    [pbr::OriginalName("EC_RELAY_MEMBER_ALREADY_EXISTS")] EcRelayMemberAlreadyExists = 40003,
    /// <summary>
    ////成员不存在
    /// </summary>
    [pbr::OriginalName("EC_RELAY_MEMBER_NOT_EXISTS")] EcRelayMemberNotExists = 40004,
    /// <summary>
    ////状态异常
    /// </summary>
    [pbr::OriginalName("EC_RELAY_STATE_INVALID")] EcRelayStateInvalid = 40005,
    /// <summary>
    ////帧率非法
    /// </summary>
    [pbr::OriginalName("EC_RELAY_INVALID_FRAME_RATE")] EcRelayInvalidFrameRate = 40006,
    /// <summary>
    ////开局状态下，G不允许修改帧率
    /// </summary>
    [pbr::OriginalName("EC_RELAY_SET_FRAME_RATE_FORBIDDEN")] EcRelaySetFrameRateForbidden = 40007,
    /// <summary>
    ////没任何成员
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NO_MEMBERS")] EcRelayNoMembers = 40008,
    /// <summary>
    ////自定义扩展服务（gamesvr）未开通
    /// </summary>
    [pbr::OriginalName("EC_RELAY_GAMESVR_SERVICE_NOT_OPEN")] EcRelayGamesvrServiceNotOpen = 40009,
    /// <summary>
    ////请求分配pod失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_REQ_POD_FAIL")] EcRelayReqPodFail = 40010,
    /// <summary>
    ////无可用的pod
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NO_AVAILABLE_POD")] EcRelayNoAvailablePod = 40011,
    /// <summary>
    ////查询帧缓存失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_GET_FRAME_CACHE_FAIL")] EcRelayGetFrameCacheFail = 40012,
    /// <summary>
    ////共享内存缓存错误
    /// </summary>
    [pbr::OriginalName("EC_RELAY_HKV_CACHE_ERROR")] EcRelayHkvCacheError = 40015,
    /// <summary>
    ////redis缓存错误
    /// </summary>
    [pbr::OriginalName("EC_RELAY_REDIS_CACHE_ERROR")] EcRelayRedisCacheError = 40016,
    /// <summary>
    ////通知relayworker失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NOTIFY_RELAYWORKER_FAIL")] EcRelayNotifyRelayworkerFail = 40018,
    /// <summary>
    ////重置房间对局失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_RESET_RELAY_ROOM_FAIL")] EcRelayResetRelayRoomFail = 40019,
    /// <summary>
    ////清理房间对局数据失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_CLEAN_RELAY_ROOM_FAIL")] EcRelayCleanRelayRoomFail = 40020,
    /// <summary>
    ////没权限，401开头是权限相关错误
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NO_PERMISSION")] EcRelayNoPermission = 40100,
    /// <summary>
    ////通知自定义服务gamesvr失败， 402开头，是自定义gamesvr相关的错误
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NOTIFY_GAMESVR_FAIL")] EcRelayNotifyGamesvrFail = 40200,
    /// <summary>
    ////转发到自定义逻辑svr失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_FORWARD_TO_GAMESVR_FAIL")] EcRelayForwardToGamesvrFail = 40201,
    /// <summary>
    ////转发到client-sdk失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_FORWARD_TO_CLIENT_FAIL")] EcRelayForwardToClientFail = 40202,
    /// <summary>
    ////公共段参数错误 60000~65999
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS")] EcInvalidParams = 60000,
    /// <summary>
    ///////匹配
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAY_MODE_VERSION")] EcInvalidParamsPlayModeVersion = 60001,
    /// <summary>
    //// 玩法协议规则类型错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAY_MODE_RULETYPE")] EcInvalidParamsPlayModeRuletype = 60002,
    /// <summary>
    //// 玩法协议规则表达式错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAY_MODE_EXPRESSION")] EcInvalidParamsPlayModeExpression = 60003,
    /// <summary>
    //// 玩法协议规则团队表达式错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAY_MODE_TEAM")] EcInvalidParamsPlayModeTeam = 60004,
    /// <summary>
    /////// msg queue 参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MSGQ_ENCODE")] EcInvalidParamsMsgqEncode = 60020,
    /// <summary>
    //// 消息队列 消息decode 参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MSGQ_DECODE")] EcInvalidParamsMsgqDecode = 60021,
    /// <summary>
    ///////CheckReq para check - 对外
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GAME_ID")] EcInvalidParamsGameId = 61000,
    /// <summary>
    //// 参数错误 player_info
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAYER_INFO")] EcInvalidParamsPlayerInfo = 61001,
    /// <summary>
    //// 参数错误 max_players
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MAX_PLAYERS")] EcInvalidParamsMaxPlayers = 61002,
    /// <summary>
    //// 参数错误 room_type
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_ROOM_TYPE")] EcInvalidParamsRoomType = 61003,
    /// <summary>
    //// 参数错误 player_id
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAYER_ID")] EcInvalidParamsPlayerId = 61004,
    /// <summary>
    //// 参数错误 match_type
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MATCH_TYPE")] EcInvalidParamsMatchType = 61005,
    /// <summary>
    //// 参数错误 match_code
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MATCH_CODE")] EcInvalidParamsMatchCode = 61006,
    /// <summary>
    //// 参数错误 open_id
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_OPEN_ID")] EcInvalidParamsOpenId = 61007,
    /// <summary>
    //// 参数错误 platform
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLATFORM")] EcInvalidParamsPlatform = 61008,
    /// <summary>
    //// 参数错误 timestamp
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_TIMESTAMP")] EcInvalidParamsTimestamp = 61009,
    /// <summary>
    //// 参数错误 sign
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_SIGN")] EcInvalidParamsSign = 61010,
    /// <summary>
    //// 参数错误 nonce
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_NONCE")] EcInvalidParamsNonce = 61011,
    /// <summary>
    //// 参数错误 token
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_TOKEN")] EcInvalidParamsToken = 61012,
    /// <summary>
    //// 参数错误 network_state
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_NETWORK_STATE")] EcInvalidParamsNetworkState = 61013,
    /// <summary>
    //// 参数错误 room_name
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_ROOM_NAME")] EcInvalidParamsRoomName = 61014,
    /// <summary>
    //// 参数错误 create_room_type
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_CREATE_ROOM_TYPE")] EcInvalidParamsCreateRoomType = 61015,
    /// <summary>
    //// 参数错误 device_id
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_DEVICE_ID")] EcInvalidParamsDeviceId = 61016,
    /// <summary>
    //// 参数错误 page_no
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PAGE_NO")] EcInvalidParamsPageNo = 61017,
    /// <summary>
    //// 参数错误 page_size
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PAGE_SIZE")] EcInvalidParamsPageSize = 61018,
    /// <summary>
    //// 参数错误 player list
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAYER_LIST")] EcInvalidParamsPlayerList = 61019,
    /// <summary>
    //// 参数错误 message
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MESSAGE")] EcInvalidParamsMessage = 61020,
    /// <summary>
    //// 参数错误 change_room_option_list
    /// </summary>
    [pbr::OriginalName("EC_INVALID_CHANGE_ROOM_OPTION")] EcInvalidChangeRoomOption = 61021,
    /// <summary>
    //// 系统错误 -6600~-69999
    ////myspp框架抛出-1000
    /// </summary>
    [pbr::OriginalName("EC_MYSPP_SYSTEM_ERR")] EcMysppSystemErr = -1000,
    /// <summary>
    ///////redis
    /// </summary>
    [pbr::OriginalName("EC_REDIS_KEY_NOT_EXIST")] EcRedisKeyNotExist = -66000,
    /// <summary>
    //// redis set 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_SET_OP_ERR")] EcRedisSetOpErr = -66001,
    /// <summary>
    //// redis get 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_GET_OP_ERR")] EcRedisGetOpErr = -66002,
    /// <summary>
    //// redis del 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_DEL_OP_ERR")] EcRedisDelOpErr = -66003,
    /// <summary>
    //// redis 操作异常
    /// </summary>
    [pbr::OriginalName("EC_REDIS_EXPIRE_OP_ERR")] EcRedisExpireOpErr = -66004,
    /// <summary>
    //// redis 加锁 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_LOCK_OP_ERR")] EcRedisLockOpErr = -66005,
    /// <summary>
    //// redis 加锁冲突 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_LOCK_ALREADY_EXIST")] EcRedisLockAlreadyExist = -66006,
    /// <summary>
    //// redis list 操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_LIST_OP_ERR")] EcRedisListOpErr = -66020,
    /// <summary>
    //// redis list pop 空结果
    /// </summary>
    [pbr::OriginalName("EC_REDIS_LIST_POP_EMPTY")] EcRedisListPopEmpty = -66021,
    /// <summary>
    //// redis 实例池获取实例失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_POOL_GET_INSTANCE_FAIL")] EcRedisPoolGetInstanceFail = -66022,
    /// <summary>
    //// redis set内为空
    /// </summary>
    [pbr::OriginalName("EC_REDIS_SET_IS_EMPTY")] EcRedisSetIsEmpty = -66023,
    /// <summary>
    //// redis 操作参数不合法
    /// </summary>
    [pbr::OriginalName("EC_REDIS_OP_INVALID_PARAMS")] EcRedisOpInvalidParams = -66024,
    /// <summary>
    ///////mysql
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_NO_ROW_FOUND")] EcMysqlNoRowFound = -66100,
    /// <summary>
    //// 查询为空
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_MULTI_ROW_FOUND")] EcMysqlMultiRowFound = -66101,
    /// <summary>
    //// 插入失败
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_INSERT_FAIL")] EcMysqlInsertFail = -66102,
    /// <summary>
    //// 失败
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_DELETE_FAIL")] EcMysqlDeleteFail = -66103,
    /// <summary>
    //// 失败
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_UPDATE_FAIL")] EcMysqlUpdateFail = -66104,
    /// <summary>
    //// 失败
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_QUERYS_FAIL")] EcMysqlQuerysFail = -66105,
    /// <summary>
    ///////pb
    /// </summary>
    [pbr::OriginalName("EC_PB_SERIALIZE_TO_STR_ERR")] EcPbSerializeToStrErr = -66200,
    /// <summary>
    //// 反序列化失败
    /// </summary>
    [pbr::OriginalName("EC_PB_PARSE_FROM_STR_ERR")] EcPbParseFromStrErr = -66201,
    /// <summary>
    ///////json
    /// </summary>
    [pbr::OriginalName("EC_DATA_FORMAT_ERR")] EcDataFormatErr = -66210,
    /// <summary>
    //// JSON数据格式转化失败
    /// </summary>
    [pbr::OriginalName("EC_JSON_FORMAT_ERR")] EcJsonFormatErr = -66211,
    /// <summary>
    //// 玩法数据格式转化失败
    /// </summary>
    [pbr::OriginalName("EC_JSON_PLAY_MODE_FORMAT_ERR")] EcJsonPlayModeFormatErr = -66212,
    /// <summary>
    //// 玩法数据格式转化失败
    /// </summary>
    [pbr::OriginalName("EC_JSON_PLAY_MODE_PARISE_ERR")] EcJsonPlayModePariseErr = -66213,
    /// <summary>
    /////// 对内接口参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_RECORE_ID")] EcInvalidParamsRecoreId = -66601,
    /// <summary>
    ///////libs
    /// </summary>
    [pbr::OriginalName("EC_HASHID_ERR")] EcHashidErr = -66700,
    /// <summary>
    //// hashcode编码失败
    /// </summary>
    [pbr::OriginalName("EC_HASHID_ENCODE_ERR")] EcHashidEncodeErr = -66701,
    /// <summary>
    //// hashcode解码失败
    /// </summary>
    [pbr::OriginalName("EC_HASHID_DECODE_ERR")] EcHashidDecodeErr = -66702,
    /// <summary>
    ///////conf
    /// </summary>
    [pbr::OriginalName("EC_CONF_ROOM_ID_BUCKET_ERR")] EcConfRoomIdBucketErr = -66801,
    /// <summary>
    ////90000～99999 预留给客户端
    ///////客户端错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_SEND_FAIL")] EcSdkSendFail = 90001,
    /// <summary>
    //// SDK 未初始化
    /// </summary>
    [pbr::OriginalName("EC_SDK_UNINIT")] EcSdkUninit = 90002,
    /// <summary>
    //// 消息响应超时
    /// </summary>
    [pbr::OriginalName("EC_SDK_RES_TIMEOUT")] EcSdkResTimeout = 90003,
    /// <summary>
    //// 登录态错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_NO_LOGIN")] EcSdkNoLogin = 90004,
    /// <summary>
    //// 帧同步鉴权错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_NO_CHECK_LOGIN")] EcSdkNoCheckLogin = 90005,
    /// <summary>
    //// 网络错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_SOCKET_ERROR")] EcSdkSocketError = 90006,
    /// <summary>
    //// Socket 断开
    /// </summary>
    [pbr::OriginalName("EC_SDK_SOCKET_CLOSE")] EcSdkSocketClose = 90007,
    /// <summary>
    //// 无房间
    /// </summary>
    [pbr::OriginalName("EC_SDK_NO_ROOM")] EcSdkNoRoom = 90008,
  }

  /// <summary>
  //////////////////////////////////房间管理////////////////////////////////////////////////////////////////
  //// 网络状态
  /// </summary>
  public enum NetworkState {
    /// <summary>
    //// 房间管理玩家掉线
    /// </summary>
    [pbr::OriginalName("COMMON_OFFLINE")] CommonOffline = 0,
    /// <summary>
    //// 房间管理玩家在线
    /// </summary>
    [pbr::OriginalName("COMMON_ONLINE")] CommonOnline = 1,
    /// <summary>
    //// 游戏中玩家掉线
    /// </summary>
    [pbr::OriginalName("RELAY_OFFLINE")] RelayOffline = 2,
    /// <summary>
    //// 游戏中玩家在线
    /// </summary>
    [pbr::OriginalName("RELAY_ONLINE")] RelayOnline = 3,
  }

  /// <summary>
  //// 创建房间方式
  /// </summary>
  public enum CreateRoomType {
    /// <summary>
    //// 手动创建
    /// </summary>
    [pbr::OriginalName("COMMON_CREATE")] CommonCreate = 0,
    /// <summary>
    //// 匹配创建
    /// </summary>
    [pbr::OriginalName("MATCH_CREATE")] MatchCreate = 1,
  }

  /// <summary>
  //// 帧同步状态
  /// </summary>
  public enum FrameSyncState {
    /// <summary>
    //// 未开始帧同步
    /// </summary>
    [pbr::OriginalName("STOP")] Stop = 0,
    /// <summary>
    //// 已开始帧同步
    /// </summary>
    [pbr::OriginalName("START")] Start = 1,
  }

  /// <summary>
  ///
  ///加入房间方式
  /// </summary>
  public enum JoinRoomType {
    /// <summary>
    //// 游戏界面点击加入游戏
    /// </summary>
    [pbr::OriginalName("COMMON_JOIN")] CommonJoin = 0,
    /// <summary>
    //// 匹配方式加入游戏
    /// </summary>
    [pbr::OriginalName("MATCH_JOIN")] MatchJoin = 1,
  }

  /// <summary>
  /// 
  ///需要修改的房间属性
  /// </summary>
  public enum ChangeRoomOption {
    [pbr::OriginalName("ROOM_NAME")] RoomName = 0,
    [pbr::OriginalName("OWNER")] Owner = 1,
    [pbr::OriginalName("IS_VIEWED")] IsViewed = 2,
    [pbr::OriginalName("IS_INVITED")] IsInvited = 3,
    [pbr::OriginalName("IS_PRIVATE")] IsPrivate = 4,
    [pbr::OriginalName("CUSTOM_PROPERTIES")] CustomProperties = 5,
    [pbr::OriginalName("IS_FORBID_JOIN")] IsForbidJoin = 6,
  }

  /// <summary>
  /// 个人或团队的匹配状态
  /// </summary>
  public enum MatchStatus {
    [pbr::OriginalName("PENDING")] Pending = 0,
    [pbr::OriginalName("MATCHING")] Matching = 1,
    [pbr::OriginalName("SUCCESS")] Success = 3,
    [pbr::OriginalName("TIMEOUT")] Timeout = 4,
  }

  public enum MatchType {
    /// <summary>
    //// 简单玩家匹配 - match_user_simple
    /// </summary>
    [pbr::OriginalName("PLAYER_SIMPLE")] PlayerSimple = 0,
    /// <summary>
    ////简单房间匹配 - match_room_simple
    /// </summary>
    [pbr::OriginalName("ROOM_SIMPLE")] RoomSimple = 1,
    /// <summary>
    ////复杂玩家匹配 - match_user_complex
    /// </summary>
    [pbr::OriginalName("PLAYER_COMPLEX")] PlayerComplex = 2,
  }

  /// <summary>
  ////=>gamesvr的请求，外层使用命令字GameSvrComm
  /// </summary>
  public enum GameSvrForwardType {
    /// <summary>
    //// The first enum value must be zero in proto3.
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_DEFAULT")] EGsForwardtypeDefault = 0,
    /// <summary>
    //// 通知svr信息
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_NOTIFY_CONNECTION")] EGsForwardtypeNotifyConnection = 1,
    /// <summary>
    //// room相关的操作事件通知
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_NOTIFY_ROOM_EVENT")] EGsForwardtypeNotifyRoomEvent = 2,
    /// <summary>
    //// 其他事件通知（预留） 
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_NOTIFY_COM_EVENT")] EGsForwardtypeNotifyComEvent = 3,
    /// <summary>
    //// 转发client->gamesvr的消息
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_CLIENT_SENDTO_GAMESVR")] EGsForwardtypeClientSendtoGamesvr = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ////Header - 二进制格式： 0x2 + htonl(整个包长(4字节)) + QAppRequest/QAppResponse+0x3  = 6bytes
  /// </summary>
  public sealed partial class ClientSendServerReqWrap1 : pb::IMessage<ClientSendServerReqWrap1> {
    private static readonly pb::MessageParser<ClientSendServerReqWrap1> _parser = new pb::MessageParser<ClientSendServerReqWrap1>(() => new ClientSendServerReqWrap1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSendServerReqWrap1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap1(ClientSendServerReqWrap1 other) : this() {
      version_ = other.version_;
      appName_ = other.appName_;
      cmd_ = other.cmd_;
      seq_ = other.seq_;
      clientIp_ = other.clientIp_;
      serviceIp_ = other.serviceIp_;
      business_ = other.business_;
      authKey_ = other.authKey_;
      authType_ = other.authType_;
      authIp_ = other.authIp_;
      gameId_ = other.gameId_;
      uid_ = other.uid_;
      playerId_ = other.playerId_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap1 Clone() {
      return new ClientSendServerReqWrap1(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    ////版本号, 默认为1,, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_name" field.</summary>
    public const int AppNameFieldNumber = 2;
    private string appName_ = "";
    /// <summary>
    ////被调方业务名称, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppName {
      get { return appName_; }
      set {
        appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 3;
    private string cmd_ = "";
    /// <summary>
    ////请求命令字, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 4;
    private string seq_ = "";
    /// <summary>
    ////请求序列号, 可使用uuid生成串, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 5;
    private string clientIp_ = "";
    /// <summary>
    ////客户端ip, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_ip" field.</summary>
    public const int ServiceIpFieldNumber = 6;
    private string serviceIp_ = "";
    /// <summary>
    ////服务端ip, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceIp {
      get { return serviceIp_; }
      set {
        serviceIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business" field.</summary>
    public const int BusinessFieldNumber = 7;
    private string business_ = "";
    /// <summary>
    ////调用方, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Business {
      get { return business_; }
      set {
        business_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_key" field.</summary>
    public const int AuthKeyFieldNumber = 8;
    private string authKey_ = "";
    /// <summary>
    ////鉴权key, 传token值, sdk必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthKey {
      get { return authKey_; }
      set {
        authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_type" field.</summary>
    public const int AuthTypeFieldNumber = 9;
    private uint authType_;
    /// <summary>
    ////鉴权类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "auth_ip" field.</summary>
    public const int AuthIpFieldNumber = 10;
    private string authIp_ = "";
    /// <summary>
    ////调用方ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthIp {
      get { return authIp_; }
      set {
        authIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 11;
    private string gameId_ = "";
    /// <summary>
    ////游戏ID，必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 12;
    private ulong uid_;
    /// <summary>
    ////用户唯一标示  --待定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 13;
    private string playerId_ = "";
    /// <summary>
    ////后端生成的玩家ID, 接入层负责校验合法性, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 14;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////参见 AccessReq, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSendServerReqWrap1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSendServerReqWrap1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (AppName != other.AppName) return false;
      if (Cmd != other.Cmd) return false;
      if (Seq != other.Seq) return false;
      if (ClientIp != other.ClientIp) return false;
      if (ServiceIp != other.ServiceIp) return false;
      if (Business != other.Business) return false;
      if (AuthKey != other.AuthKey) return false;
      if (AuthType != other.AuthType) return false;
      if (AuthIp != other.AuthIp) return false;
      if (GameId != other.GameId) return false;
      if (Uid != other.Uid) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (AppName.Length != 0) hash ^= AppName.GetHashCode();
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (ServiceIp.Length != 0) hash ^= ServiceIp.GetHashCode();
      if (Business.Length != 0) hash ^= Business.GetHashCode();
      if (AuthKey.Length != 0) hash ^= AuthKey.GetHashCode();
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (AuthIp.Length != 0) hash ^= AuthIp.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (AppName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppName);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cmd);
      }
      if (Seq.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Seq);
      }
      if (ClientIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientIp);
      }
      if (ServiceIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServiceIp);
      }
      if (Business.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Business);
      }
      if (AuthKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthKey);
      }
      if (AuthType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AuthType);
      }
      if (AuthIp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(AuthIp);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GameId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Uid);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PlayerId);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (AppName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppName);
      }
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (ServiceIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceIp);
      }
      if (Business.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Business);
      }
      if (AuthKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
      }
      if (AuthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuthType);
      }
      if (AuthIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthIp);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSendServerReqWrap1 other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.AppName.Length != 0) {
        AppName = other.AppName;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.ServiceIp.Length != 0) {
        ServiceIp = other.ServiceIp;
      }
      if (other.Business.Length != 0) {
        Business = other.Business;
      }
      if (other.AuthKey.Length != 0) {
        AuthKey = other.AuthKey;
      }
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.AuthIp.Length != 0) {
        AuthIp = other.AuthIp;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            AppName = input.ReadString();
            break;
          }
          case 26: {
            Cmd = input.ReadString();
            break;
          }
          case 34: {
            Seq = input.ReadString();
            break;
          }
          case 42: {
            ClientIp = input.ReadString();
            break;
          }
          case 50: {
            ServiceIp = input.ReadString();
            break;
          }
          case 58: {
            Business = input.ReadString();
            break;
          }
          case 66: {
            AuthKey = input.ReadString();
            break;
          }
          case 72: {
            AuthType = input.ReadUInt32();
            break;
          }
          case 82: {
            AuthIp = input.ReadString();
            break;
          }
          case 90: {
            GameId = input.ReadString();
            break;
          }
          case 96: {
            Uid = input.ReadUInt64();
            break;
          }
          case 106: {
            PlayerId = input.ReadString();
            break;
          }
          case 114: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerSendClientBstWrap1 : pb::IMessage<ServerSendClientBstWrap1> {
    private static readonly pb::MessageParser<ServerSendClientBstWrap1> _parser = new pb::MessageParser<ServerSendClientBstWrap1>(() => new ServerSendClientBstWrap1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSendClientBstWrap1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap1(ServerSendClientBstWrap1 other) : this() {
      version_ = other.version_;
      appName_ = other.appName_;
      cmd_ = other.cmd_;
      seq_ = other.seq_;
      clientIp_ = other.clientIp_;
      serviceIp_ = other.serviceIp_;
      business_ = other.business_;
      authKey_ = other.authKey_;
      authType_ = other.authType_;
      authIp_ = other.authIp_;
      gameId_ = other.gameId_;
      uid_ = other.uid_;
      playerId_ = other.playerId_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap1 Clone() {
      return new ServerSendClientBstWrap1(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    ////版本号, 默认为1,, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_name" field.</summary>
    public const int AppNameFieldNumber = 2;
    private string appName_ = "";
    /// <summary>
    ////被调方业务名称, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppName {
      get { return appName_; }
      set {
        appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 3;
    private string cmd_ = "";
    /// <summary>
    ////请求命令字, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 4;
    private string seq_ = "";
    /// <summary>
    ////请求序列号, 可使用uuid生成串, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 5;
    private string clientIp_ = "";
    /// <summary>
    ////客户端ip, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_ip" field.</summary>
    public const int ServiceIpFieldNumber = 6;
    private string serviceIp_ = "";
    /// <summary>
    ////服务端ip, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceIp {
      get { return serviceIp_; }
      set {
        serviceIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business" field.</summary>
    public const int BusinessFieldNumber = 7;
    private string business_ = "";
    /// <summary>
    ////调用方, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Business {
      get { return business_; }
      set {
        business_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_key" field.</summary>
    public const int AuthKeyFieldNumber = 8;
    private string authKey_ = "";
    /// <summary>
    ////鉴权key, 传token值, sdk必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthKey {
      get { return authKey_; }
      set {
        authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_type" field.</summary>
    public const int AuthTypeFieldNumber = 9;
    private uint authType_;
    /// <summary>
    ////鉴权类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "auth_ip" field.</summary>
    public const int AuthIpFieldNumber = 10;
    private string authIp_ = "";
    /// <summary>
    ////调用方ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthIp {
      get { return authIp_; }
      set {
        authIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 11;
    private string gameId_ = "";
    /// <summary>
    ////游戏ID，必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 12;
    private ulong uid_;
    /// <summary>
    ////用户唯一标示  --待定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 13;
    private string playerId_ = "";
    /// <summary>
    ////后端生成的玩家ID, 接入层负责校验合法性, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 14;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////参见 AccessReq, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSendClientBstWrap1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSendClientBstWrap1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (AppName != other.AppName) return false;
      if (Cmd != other.Cmd) return false;
      if (Seq != other.Seq) return false;
      if (ClientIp != other.ClientIp) return false;
      if (ServiceIp != other.ServiceIp) return false;
      if (Business != other.Business) return false;
      if (AuthKey != other.AuthKey) return false;
      if (AuthType != other.AuthType) return false;
      if (AuthIp != other.AuthIp) return false;
      if (GameId != other.GameId) return false;
      if (Uid != other.Uid) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (AppName.Length != 0) hash ^= AppName.GetHashCode();
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (ServiceIp.Length != 0) hash ^= ServiceIp.GetHashCode();
      if (Business.Length != 0) hash ^= Business.GetHashCode();
      if (AuthKey.Length != 0) hash ^= AuthKey.GetHashCode();
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (AuthIp.Length != 0) hash ^= AuthIp.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (AppName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppName);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cmd);
      }
      if (Seq.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Seq);
      }
      if (ClientIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientIp);
      }
      if (ServiceIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServiceIp);
      }
      if (Business.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Business);
      }
      if (AuthKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthKey);
      }
      if (AuthType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AuthType);
      }
      if (AuthIp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(AuthIp);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GameId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Uid);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PlayerId);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (AppName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppName);
      }
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (ServiceIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceIp);
      }
      if (Business.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Business);
      }
      if (AuthKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
      }
      if (AuthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuthType);
      }
      if (AuthIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthIp);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSendClientBstWrap1 other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.AppName.Length != 0) {
        AppName = other.AppName;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.ServiceIp.Length != 0) {
        ServiceIp = other.ServiceIp;
      }
      if (other.Business.Length != 0) {
        Business = other.Business;
      }
      if (other.AuthKey.Length != 0) {
        AuthKey = other.AuthKey;
      }
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.AuthIp.Length != 0) {
        AuthIp = other.AuthIp;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            AppName = input.ReadString();
            break;
          }
          case 26: {
            Cmd = input.ReadString();
            break;
          }
          case 34: {
            Seq = input.ReadString();
            break;
          }
          case 42: {
            ClientIp = input.ReadString();
            break;
          }
          case 50: {
            ServiceIp = input.ReadString();
            break;
          }
          case 58: {
            Business = input.ReadString();
            break;
          }
          case 66: {
            AuthKey = input.ReadString();
            break;
          }
          case 72: {
            AuthType = input.ReadUInt32();
            break;
          }
          case 82: {
            AuthIp = input.ReadString();
            break;
          }
          case 90: {
            GameId = input.ReadString();
            break;
          }
          case 96: {
            Uid = input.ReadUInt64();
            break;
          }
          case 106: {
            PlayerId = input.ReadString();
            break;
          }
          case 114: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////统一回包，err_code和err_msg为框架错误信息，业务错误码在body中
  /// </summary>
  public sealed partial class ClientSendServerRspWrap1 : pb::IMessage<ClientSendServerRspWrap1> {
    private static readonly pb::MessageParser<ClientSendServerRspWrap1> _parser = new pb::MessageParser<ClientSendServerRspWrap1>(() => new ClientSendServerRspWrap1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSendServerRspWrap1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap1(ClientSendServerRspWrap1 other) : this() {
      seq_ = other.seq_;
      errCode_ = other.errCode_;
      errMsg_ = other.errMsg_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap1 Clone() {
      return new ClientSendServerRspWrap1(this);
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private string seq_ = "";
    /// <summary>
    ////请求序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private int errCode_;
    /// <summary>
    ////错误码(0~10000为系统错误)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "err_msg" field.</summary>
    public const int ErrMsgFieldNumber = 3;
    private string errMsg_ = "";
    /// <summary>
    ////错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 4;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////参见 AccessRsp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSendServerRspWrap1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSendServerRspWrap1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seq != other.Seq) return false;
      if (ErrCode != other.ErrCode) return false;
      if (ErrMsg != other.ErrMsg) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seq);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrCode);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrMsg);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSendServerRspWrap1 other) {
      if (other == null) {
        return;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Seq = input.ReadString();
            break;
          }
          case 16: {
            ErrCode = input.ReadInt32();
            break;
          }
          case 26: {
            ErrMsg = input.ReadString();
            break;
          }
          case 34: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////转发层body
  /// </summary>
  public sealed partial class ClientSendServerReqWrap2 : pb::IMessage<ClientSendServerReqWrap2> {
    private static readonly pb::MessageParser<ClientSendServerReqWrap2> _parser = new pb::MessageParser<ClientSendServerReqWrap2>(() => new ClientSendServerReqWrap2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSendServerReqWrap2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap2(ClientSendServerReqWrap2 other) : this() {
      cmd_ = other.cmd_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap2 Clone() {
      return new ClientSendServerReqWrap2(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private global::Lagame.ProtoCmd cmd_ = global::Lagame.ProtoCmd.ECmdInvalid;
    /// <summary>
    ////业务命令字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.ProtoCmd Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////业务body, 有各个业务自行定义 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSendServerReqWrap2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSendServerReqWrap2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != global::Lagame.ProtoCmd.ECmdInvalid) hash ^= Cmd.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != global::Lagame.ProtoCmd.ECmdInvalid) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != global::Lagame.ProtoCmd.ECmdInvalid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSendServerReqWrap2 other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != global::Lagame.ProtoCmd.ECmdInvalid) {
        Cmd = other.Cmd;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cmd = (global::Lagame.ProtoCmd) input.ReadEnum();
            break;
          }
          case 18: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientSendServerRspWrap2 : pb::IMessage<ClientSendServerRspWrap2> {
    private static readonly pb::MessageParser<ClientSendServerRspWrap2> _parser = new pb::MessageParser<ClientSendServerRspWrap2>(() => new ClientSendServerRspWrap2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSendServerRspWrap2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap2(ClientSendServerRspWrap2 other) : this() {
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap2 Clone() {
      return new ClientSendServerRspWrap2(this);
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 1;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////业务回包, 由各业务自行定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSendServerRspWrap2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSendServerRspWrap2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Body.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSendServerRspWrap2 other) {
      if (other == null) {
        return;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////心跳包body
  /// </summary>
  public sealed partial class HeartBeatReq : pb::IMessage<HeartBeatReq> {
    private static readonly pb::MessageParser<HeartBeatReq> _parser = new pb::MessageParser<HeartBeatReq>(() => new HeartBeatReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq(HeartBeatReq other) : this() {
      conType_ = other.conType_;
      routeId_ = other.routeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq Clone() {
      return new HeartBeatReq(this);
    }

    /// <summary>Field number for the "con_type" field.</summary>
    public const int ConTypeFieldNumber = 1;
    private global::Lagame.ConnectionType conType_ = global::Lagame.ConnectionType.Common;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.ConnectionType ConType {
      get { return conType_; }
      set {
        conType_ = value;
      }
    }

    /// <summary>Field number for the "route_id" field.</summary>
    public const int RouteIdFieldNumber = 2;
    private string routeId_ = "";
    /// <summary>
    ////路由ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouteId {
      get { return routeId_; }
      set {
        routeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConType != other.ConType) return false;
      if (RouteId != other.RouteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConType != global::Lagame.ConnectionType.Common) hash ^= ConType.GetHashCode();
      if (RouteId.Length != 0) hash ^= RouteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConType != global::Lagame.ConnectionType.Common) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ConType);
      }
      if (RouteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RouteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConType != global::Lagame.ConnectionType.Common) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConType);
      }
      if (RouteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatReq other) {
      if (other == null) {
        return;
      }
      if (other.ConType != global::Lagame.ConnectionType.Common) {
        ConType = other.ConType;
      }
      if (other.RouteId.Length != 0) {
        RouteId = other.RouteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConType = (global::Lagame.ConnectionType) input.ReadEnum();
            break;
          }
          case 18: {
            RouteId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartBeatRsp : pb::IMessage<HeartBeatRsp> {
    private static readonly pb::MessageParser<HeartBeatRsp> _parser = new pb::MessageParser<HeartBeatRsp>(() => new HeartBeatRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRsp(HeartBeatRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRsp Clone() {
      return new HeartBeatRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ////客户端协议
  /// </summary>
  public sealed partial class ServerSendClientBstWrap2 : pb::IMessage<ServerSendClientBstWrap2> {
    private static readonly pb::MessageParser<ServerSendClientBstWrap2> _parser = new pb::MessageParser<ServerSendClientBstWrap2>(() => new ServerSendClientBstWrap2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSendClientBstWrap2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap2(ServerSendClientBstWrap2 other) : this() {
      type_ = other.type_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap2 Clone() {
      return new ServerSendClientBstWrap2(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Lagame.ServerSendClientBstWrap2Type type_ = global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest;
    /// <summary>
    ////推送类型        
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.ServerSendClientBstWrap2Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ////推送消息，由各业务定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSendClientBstWrap2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSendClientBstWrap2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest) hash ^= Type.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSendClientBstWrap2 other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest) {
        Type = other.Type;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Lagame.ServerSendClientBstWrap2Type) input.ReadEnum();
            break;
          }
          case 18: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////客户端协议
  /// </summary>
  public sealed partial class NOUSEServerSendClientBstRspWrap2 : pb::IMessage<NOUSEServerSendClientBstRspWrap2> {
    private static readonly pb::MessageParser<NOUSEServerSendClientBstRspWrap2> _parser = new pb::MessageParser<NOUSEServerSendClientBstRspWrap2>(() => new NOUSEServerSendClientBstRspWrap2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NOUSEServerSendClientBstRspWrap2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NOUSEServerSendClientBstRspWrap2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NOUSEServerSendClientBstRspWrap2(NOUSEServerSendClientBstRspWrap2 other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NOUSEServerSendClientBstRspWrap2 Clone() {
      return new NOUSEServerSendClientBstRspWrap2(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NOUSEServerSendClientBstRspWrap2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NOUSEServerSendClientBstRspWrap2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NOUSEServerSendClientBstRspWrap2 other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ////检查是否登陆
  /// </summary>
  public sealed partial class CheckLoginReq : pb::IMessage<CheckLoginReq> {
    private static readonly pb::MessageParser<CheckLoginReq> _parser = new pb::MessageParser<CheckLoginReq>(() => new CheckLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginReq(CheckLoginReq other) : this() {
      token_ = other.token_;
      routeId_ = other.routeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginReq Clone() {
      return new CheckLoginReq(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    ////客户端token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route_id" field.</summary>
    public const int RouteIdFieldNumber = 2;
    private string routeId_ = "";
    /// <summary>
    ////路由ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouteId {
      get { return routeId_; }
      set {
        routeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RouteId != other.RouteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RouteId.Length != 0) hash ^= RouteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RouteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RouteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RouteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RouteId.Length != 0) {
        RouteId = other.RouteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            RouteId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckLoginRsp : pb::IMessage<CheckLoginRsp> {
    private static readonly pb::MessageParser<CheckLoginRsp> _parser = new pb::MessageParser<CheckLoginRsp>(() => new CheckLoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckLoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginRsp(CheckLoginRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginRsp Clone() {
      return new CheckLoginRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckLoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckLoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckLoginRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ////以下定义每个push的body 
  /// </summary>
  public sealed partial class PushBodyType : pb::IMessage<PushBodyType> {
    private static readonly pb::MessageParser<PushBodyType> _parser = new pb::MessageParser<PushBodyType>(() => new PushBodyType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushBodyType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushBodyType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushBodyType(PushBodyType other) : this() {
      pushMsg_ = other.pushMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushBodyType Clone() {
      return new PushBodyType(this);
    }

    /// <summary>Field number for the "push_msg" field.</summary>
    public const int PushMsgFieldNumber = 1;
    private string pushMsg_ = "";
    /// <summary>
    ////测试消息 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PushMsg {
      get { return pushMsg_; }
      set {
        pushMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushBodyType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushBodyType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PushMsg != other.PushMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PushMsg.Length != 0) hash ^= PushMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PushMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PushMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PushMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PushMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushBodyType other) {
      if (other == null) {
        return;
      }
      if (other.PushMsg.Length != 0) {
        PushMsg = other.PushMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PushMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////用户中心////////////
  /// </summary>
  public sealed partial class LoginReq : pb::IMessage<LoginReq> {
    private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq(LoginReq other) : this() {
      gameId_ = other.gameId_;
      openId_ = other.openId_;
      platform_ = other.platform_;
      channel_ = other.channel_;
      nonce_ = other.nonce_;
      timestamp_ = other.timestamp_;
      sign_ = other.sign_;
      deviceId_ = other.deviceId_;
      mac_ = other.mac_;
      imei_ = other.imei_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq Clone() {
      return new LoginReq(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    /// <summary>
    ////字段顺序：1、通用gameid roomid playerid  2、相关字段放一起
    ////gameid + open_id => player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_id" field.</summary>
    public const int OpenIdFieldNumber = 2;
    private string openId_ = "";
    /// <summary>
    //// 若是微信平台，则是微信用户的openid, 开发商提供
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private ulong platform_;
    /// <summary>
    //// 平台类型 android ios
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 4;
    private ulong channel_;
    /// <summary>
    //// 渠道： 微信、qq、QQ空间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 5;
    private ulong nonce_;
    /// <summary>
    //// 随机正整数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private ulong timestamp_;
    /// <summary>
    //// 时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 7;
    private string sign_ = "";
    /// <summary>
    //// 签名串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 8;
    private string deviceId_ = "";
    /// <summary>
    //// 设备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 9;
    private string mac_ = "";
    /// <summary>
    //// mac地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imei" field.</summary>
    public const int ImeiFieldNumber = 10;
    private string imei_ = "";
    /// <summary>
    //// 手机序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imei {
      get { return imei_; }
      set {
        imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (OpenId != other.OpenId) return false;
      if (Platform != other.Platform) return false;
      if (Channel != other.Channel) return false;
      if (Nonce != other.Nonce) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Sign != other.Sign) return false;
      if (DeviceId != other.DeviceId) return false;
      if (Mac != other.Mac) return false;
      if (Imei != other.Imei) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (Platform != 0UL) hash ^= Platform.GetHashCode();
      if (Channel != 0UL) hash ^= Channel.GetHashCode();
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (Imei.Length != 0) hash ^= Imei.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OpenId);
      }
      if (Platform != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Platform);
      }
      if (Channel != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Channel);
      }
      if (Nonce != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Nonce);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Timestamp);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Sign);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeviceId);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Mac);
      }
      if (Imei.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Imei);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
      }
      if (Platform != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Platform);
      }
      if (Channel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Channel);
      }
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (Imei.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginReq other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.Platform != 0UL) {
        Platform = other.Platform;
      }
      if (other.Channel != 0UL) {
        Channel = other.Channel;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.Imei.Length != 0) {
        Imei = other.Imei;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 18: {
            OpenId = input.ReadString();
            break;
          }
          case 24: {
            Platform = input.ReadUInt64();
            break;
          }
          case 32: {
            Channel = input.ReadUInt64();
            break;
          }
          case 40: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 58: {
            Sign = input.ReadString();
            break;
          }
          case 66: {
            DeviceId = input.ReadString();
            break;
          }
          case 74: {
            Mac = input.ReadString();
            break;
          }
          case 82: {
            Imei = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRsp : pb::IMessage<LoginRsp> {
    private static readonly pb::MessageParser<LoginRsp> _parser = new pb::MessageParser<LoginRsp>(() => new LoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp(LoginRsp other) : this() {
      token_ = other.token_;
      playerId_ = other.playerId_;
      expireTime_ = other.expireTime_;
      sdkConfig_ = other.sdkConfig_ != null ? other.sdkConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp Clone() {
      return new LoginRsp(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    //// 签发的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    //// 用户id，游戏平台生成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 3;
    private ulong expireTime_;
    /// <summary>
    //// 过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "sdkConfig" field.</summary>
    public const int SdkConfigFieldNumber = 4;
    private global::Lagame.SdkConfig sdkConfig_;
    /// <summary>
    //// 心跳配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.SdkConfig SdkConfig {
      get { return sdkConfig_; }
      set {
        sdkConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (PlayerId != other.PlayerId) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (!object.Equals(SdkConfig, other.SdkConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (ExpireTime != 0UL) hash ^= ExpireTime.GetHashCode();
      if (sdkConfig_ != null) hash ^= SdkConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ExpireTime);
      }
      if (sdkConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SdkConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (sdkConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SdkConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ExpireTime != 0UL) {
        ExpireTime = other.ExpireTime;
      }
      if (other.sdkConfig_ != null) {
        if (sdkConfig_ == null) {
          SdkConfig = new global::Lagame.SdkConfig();
        }
        SdkConfig.MergeFrom(other.SdkConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 34: {
            if (sdkConfig_ == null) {
              SdkConfig = new global::Lagame.SdkConfig();
            }
            input.ReadMessage(SdkConfig);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SdkConfig : pb::IMessage<SdkConfig> {
    private static readonly pb::MessageParser<SdkConfig> _parser = new pb::MessageParser<SdkConfig>(() => new SdkConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SdkConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SdkConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SdkConfig(SdkConfig other) : this() {
      pingInterval_ = other.pingInterval_;
      reportInterval_ = other.reportInterval_;
      serverTime_ = other.serverTime_;
      enableUdp_ = other.enableUdp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SdkConfig Clone() {
      return new SdkConfig(this);
    }

    /// <summary>Field number for the "ping_interval" field.</summary>
    public const int PingIntervalFieldNumber = 1;
    private uint pingInterval_;
    /// <summary>
    //// 心跳间隔，默认 5000, ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PingInterval {
      get { return pingInterval_; }
      set {
        pingInterval_ = value;
      }
    }

    /// <summary>Field number for the "report_interval" field.</summary>
    public const int ReportIntervalFieldNumber = 2;
    private uint reportInterval_;
    /// <summary>
    //// sdk默认上报间隔，默认10000, ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReportInterval {
      get { return reportInterval_; }
      set {
        reportInterval_ = value;
      }
    }

    /// <summary>Field number for the "server_time" field.</summary>
    public const int ServerTimeFieldNumber = 3;
    private ulong serverTime_;
    /// <summary>
    //// 服务端时间戳, ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "enable_udp" field.</summary>
    public const int EnableUdpFieldNumber = 4;
    private bool enableUdp_;
    /// <summary>
    //// 是否使用 UDP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableUdp {
      get { return enableUdp_; }
      set {
        enableUdp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SdkConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SdkConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PingInterval != other.PingInterval) return false;
      if (ReportInterval != other.ReportInterval) return false;
      if (ServerTime != other.ServerTime) return false;
      if (EnableUdp != other.EnableUdp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PingInterval != 0) hash ^= PingInterval.GetHashCode();
      if (ReportInterval != 0) hash ^= ReportInterval.GetHashCode();
      if (ServerTime != 0UL) hash ^= ServerTime.GetHashCode();
      if (EnableUdp != false) hash ^= EnableUdp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PingInterval != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PingInterval);
      }
      if (ReportInterval != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReportInterval);
      }
      if (ServerTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ServerTime);
      }
      if (EnableUdp != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableUdp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PingInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PingInterval);
      }
      if (ReportInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReportInterval);
      }
      if (ServerTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTime);
      }
      if (EnableUdp != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SdkConfig other) {
      if (other == null) {
        return;
      }
      if (other.PingInterval != 0) {
        PingInterval = other.PingInterval;
      }
      if (other.ReportInterval != 0) {
        ReportInterval = other.ReportInterval;
      }
      if (other.ServerTime != 0UL) {
        ServerTime = other.ServerTime;
      }
      if (other.EnableUdp != false) {
        EnableUdp = other.EnableUdp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PingInterval = input.ReadUInt32();
            break;
          }
          case 16: {
            ReportInterval = input.ReadUInt32();
            break;
          }
          case 24: {
            ServerTime = input.ReadUInt64();
            break;
          }
          case 32: {
            EnableUdp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 接入层负责校验token，这里去掉
  ////string token        = 1; /// 登录成功后签发的token
  /// </summary>
  public sealed partial class LogoutReq : pb::IMessage<LogoutReq> {
    private static readonly pb::MessageParser<LogoutReq> _parser = new pb::MessageParser<LogoutReq>(() => new LogoutReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq(LogoutReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq Clone() {
      return new LogoutReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LogoutRsp : pb::IMessage<LogoutRsp> {
    private static readonly pb::MessageParser<LogoutRsp> _parser = new pb::MessageParser<LogoutRsp>(() => new LogoutRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp(LogoutRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp Clone() {
      return new LogoutRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///////////////////////////////////////////////帧同步服务 or 状态同步/////////////////////////////////////////////
  /// </summary>
  public sealed partial class StartFrameSyncReq : pb::IMessage<StartFrameSyncReq> {
    private static readonly pb::MessageParser<StartFrameSyncReq> _parser = new pb::MessageParser<StartFrameSyncReq>(() => new StartFrameSyncReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartFrameSyncReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncReq(StartFrameSyncReq other) : this() {
      roomId_ = other.roomId_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncReq Clone() {
      return new StartFrameSyncReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartFrameSyncReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartFrameSyncReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartFrameSyncReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartFrameSyncRsp : pb::IMessage<StartFrameSyncRsp> {
    private static readonly pb::MessageParser<StartFrameSyncRsp> _parser = new pb::MessageParser<StartFrameSyncRsp>(() => new StartFrameSyncRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartFrameSyncRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncRsp(StartFrameSyncRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncRsp Clone() {
      return new StartFrameSyncRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartFrameSyncRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartFrameSyncRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartFrameSyncRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StopFrameSyncReq : pb::IMessage<StopFrameSyncReq> {
    private static readonly pb::MessageParser<StopFrameSyncReq> _parser = new pb::MessageParser<StopFrameSyncReq>(() => new StopFrameSyncReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopFrameSyncReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncReq(StopFrameSyncReq other) : this() {
      roomId_ = other.roomId_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncReq Clone() {
      return new StopFrameSyncReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopFrameSyncReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopFrameSyncReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopFrameSyncReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopFrameSyncRsp : pb::IMessage<StopFrameSyncRsp> {
    private static readonly pb::MessageParser<StopFrameSyncRsp> _parser = new pb::MessageParser<StopFrameSyncRsp>(() => new StopFrameSyncRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopFrameSyncRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncRsp(StopFrameSyncRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncRsp Clone() {
      return new StopFrameSyncRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopFrameSyncRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopFrameSyncRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopFrameSyncRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class FrameItem : pb::IMessage<FrameItem> {
    private static readonly pb::MessageParser<FrameItem> _parser = new pb::MessageParser<FrameItem>(() => new FrameItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameItem(FrameItem other) : this() {
      playerId_ = other.playerId_;
      data_ = other.data_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameItem Clone() {
      return new FrameItem(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Data != other.Data) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameItem other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////帧输入
  /// </summary>
  public sealed partial class SendFrameReq : pb::IMessage<SendFrameReq> {
    private static readonly pb::MessageParser<SendFrameReq> _parser = new pb::MessageParser<SendFrameReq>(() => new SendFrameReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendFrameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameReq(SendFrameReq other) : this() {
      roomId_ = other.roomId_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameReq Clone() {
      return new SendFrameReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::Lagame.FrameItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.FrameItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendFrameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendFrameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendFrameReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::Lagame.FrameItem();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            if (item_ == null) {
              Item = new global::Lagame.FrameItem();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendFrameRsp : pb::IMessage<SendFrameRsp> {
    private static readonly pb::MessageParser<SendFrameRsp> _parser = new pb::MessageParser<SendFrameRsp>(() => new SendFrameRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendFrameRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameRsp(SendFrameRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameRsp Clone() {
      return new SendFrameRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendFrameRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendFrameRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendFrameRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class FrameExtInfo : pb::IMessage<FrameExtInfo> {
    private static readonly pb::MessageParser<FrameExtInfo> _parser = new pb::MessageParser<FrameExtInfo>(() => new FrameExtInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameExtInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameExtInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameExtInfo(FrameExtInfo other) : this() {
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameExtInfo Clone() {
      return new FrameExtInfo(this);
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 1;
    private ulong seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameExtInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameExtInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seed != 0UL) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seed != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameExtInfo other) {
      if (other == null) {
        return;
      }
      if (other.Seed != 0UL) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seed = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      id_ = other.id_;
      items_ = other.items_.Clone();
      ext_ = other.ext_ != null ? other.ext_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lagame.FrameItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Lagame.FrameItem.Parser);
    private readonly pbc::RepeatedField<global::Lagame.FrameItem> items_ = new pbc::RepeatedField<global::Lagame.FrameItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.FrameItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "ext" field.</summary>
    public const int ExtFieldNumber = 3;
    private global::Lagame.FrameExtInfo ext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.FrameExtInfo Ext {
      get { return ext_; }
      set {
        ext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!items_.Equals(other.items_)) return false;
      if (!object.Equals(Ext, other.Ext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      hash ^= items_.GetHashCode();
      if (ext_ != null) hash ^= Ext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (ext_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Ext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (ext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      items_.Add(other.items_);
      if (other.ext_ != null) {
        if (ext_ == null) {
          Ext = new global::Lagame.FrameExtInfo();
        }
        Ext.MergeFrom(other.Ext);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 26: {
            if (ext_ == null) {
              Ext = new global::Lagame.FrameExtInfo();
            }
            input.ReadMessage(Ext);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////补帧
  /// </summary>
  public sealed partial class RequestFrameReq : pb::IMessage<RequestFrameReq> {
    private static readonly pb::MessageParser<RequestFrameReq> _parser = new pb::MessageParser<RequestFrameReq>(() => new RequestFrameReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestFrameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameReq(RequestFrameReq other) : this() {
      roomId_ = other.roomId_;
      beginFrameId_ = other.beginFrameId_;
      endFrameId_ = other.endFrameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameReq Clone() {
      return new RequestFrameReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "begin_frame_id" field.</summary>
    public const int BeginFrameIdFieldNumber = 2;
    private ulong beginFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeginFrameId {
      get { return beginFrameId_; }
      set {
        beginFrameId_ = value;
      }
    }

    /// <summary>Field number for the "end_frame_id" field.</summary>
    public const int EndFrameIdFieldNumber = 3;
    private ulong endFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndFrameId {
      get { return endFrameId_; }
      set {
        endFrameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestFrameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestFrameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (BeginFrameId != other.BeginFrameId) return false;
      if (EndFrameId != other.EndFrameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (BeginFrameId != 0UL) hash ^= BeginFrameId.GetHashCode();
      if (EndFrameId != 0UL) hash ^= EndFrameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (BeginFrameId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BeginFrameId);
      }
      if (EndFrameId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EndFrameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (BeginFrameId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeginFrameId);
      }
      if (EndFrameId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndFrameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestFrameReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.BeginFrameId != 0UL) {
        BeginFrameId = other.BeginFrameId;
      }
      if (other.EndFrameId != 0UL) {
        EndFrameId = other.EndFrameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 16: {
            BeginFrameId = input.ReadUInt64();
            break;
          }
          case 24: {
            EndFrameId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestFrameRsp : pb::IMessage<RequestFrameRsp> {
    private static readonly pb::MessageParser<RequestFrameRsp> _parser = new pb::MessageParser<RequestFrameRsp>(() => new RequestFrameRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestFrameRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameRsp(RequestFrameRsp other) : this() {
      frames_ = other.frames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameRsp Clone() {
      return new RequestFrameRsp(this);
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lagame.Frame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(10, global::Lagame.Frame.Parser);
    private readonly pbc::RepeatedField<global::Lagame.Frame> frames_ = new pbc::RepeatedField<global::Lagame.Frame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.Frame> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestFrameRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestFrameRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!frames_.Equals(other.frames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= frames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      frames_.WriteTo(output, _repeated_frames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestFrameRsp other) {
      if (other == null) {
        return;
      }
      frames_.Add(other.frames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////玩家信息meta
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      teamId_ = other.teamId_;
      customPlayerStatus_ = other.customPlayerStatus_;
      customProfile_ = other.customProfile_;
      commonNetworkState_ = other.commonNetworkState_;
      relayNetworkState_ = other.relayNetworkState_;
      isRobot_ = other.isRobot_;
      matchAttributes_ = other.matchAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// [rm-sdk-para] 用户ID（需要鉴权）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 3;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] 归属队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 4;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 开发者自定义状态，客户端透传(类似：0房间中；1准备中；2游戏中)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "custom_profile" field.</summary>
    public const int CustomProfileFieldNumber = 5;
    private string customProfile_ = "";
    /// <summary>
    //// 开发者自定义属性，用户的其他属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProfile {
      get { return customProfile_; }
      set {
        customProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "common_network_state" field.</summary>
    public const int CommonNetworkStateFieldNumber = 6;
    private global::Lagame.NetworkState commonNetworkState_ = global::Lagame.NetworkState.CommonOffline;
    /// <summary>
    //// [rm-sdk-para] 用户房间控制流网络状态：0房间掉线；1房间在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.NetworkState CommonNetworkState {
      get { return commonNetworkState_; }
      set {
        commonNetworkState_ = value;
      }
    }

    /// <summary>Field number for the "relay_network_state" field.</summary>
    public const int RelayNetworkStateFieldNumber = 7;
    private global::Lagame.NetworkState relayNetworkState_ = global::Lagame.NetworkState.CommonOffline;
    /// <summary>
    //// [rm-sdk-para] 用户帧同步控制流网络状态：2掉线；3在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.NetworkState RelayNetworkState {
      get { return relayNetworkState_; }
      set {
        relayNetworkState_ = value;
      }
    }

    /// <summary>Field number for the "is_robot" field.</summary>
    public const int IsRobotFieldNumber = 8;
    private bool isRobot_;
    /// <summary>
    //// [rm-sdk-para] 该玩家是否为机器人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRobot {
      get { return isRobot_; }
      set {
        isRobot_ = value;
      }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Lagame.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(74, global::Lagame.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::Lagame.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::Lagame.MatchAttribute>();
    /// <summary>
    //// [rm-sdk-para] 匹配属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (TeamId != other.TeamId) return false;
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      if (CustomProfile != other.CustomProfile) return false;
      if (CommonNetworkState != other.CommonNetworkState) return false;
      if (RelayNetworkState != other.RelayNetworkState) return false;
      if (IsRobot != other.IsRobot) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (CustomProfile.Length != 0) hash ^= CustomProfile.GetHashCode();
      if (CommonNetworkState != global::Lagame.NetworkState.CommonOffline) hash ^= CommonNetworkState.GetHashCode();
      if (RelayNetworkState != global::Lagame.NetworkState.CommonOffline) hash ^= RelayNetworkState.GetHashCode();
      if (IsRobot != false) hash ^= IsRobot.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TeamId);
      }
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomProfile);
      }
      if (CommonNetworkState != global::Lagame.NetworkState.CommonOffline) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CommonNetworkState);
      }
      if (RelayNetworkState != global::Lagame.NetworkState.CommonOffline) {
        output.WriteRawTag(56);
        output.WriteEnum((int) RelayNetworkState);
      }
      if (IsRobot != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsRobot);
      }
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProfile);
      }
      if (CommonNetworkState != global::Lagame.NetworkState.CommonOffline) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommonNetworkState);
      }
      if (RelayNetworkState != global::Lagame.NetworkState.CommonOffline) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RelayNetworkState);
      }
      if (IsRobot != false) {
        size += 1 + 1;
      }
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      if (other.CustomProfile.Length != 0) {
        CustomProfile = other.CustomProfile;
      }
      if (other.CommonNetworkState != global::Lagame.NetworkState.CommonOffline) {
        CommonNetworkState = other.CommonNetworkState;
      }
      if (other.RelayNetworkState != global::Lagame.NetworkState.CommonOffline) {
        RelayNetworkState = other.RelayNetworkState;
      }
      if (other.IsRobot != false) {
        IsRobot = other.IsRobot;
      }
      matchAttributes_.Add(other.matchAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            TeamId = input.ReadString();
            break;
          }
          case 32: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
          case 42: {
            CustomProfile = input.ReadString();
            break;
          }
          case 48: {
            CommonNetworkState = (global::Lagame.NetworkState) input.ReadEnum();
            break;
          }
          case 56: {
            RelayNetworkState = (global::Lagame.NetworkState) input.ReadEnum();
            break;
          }
          case 64: {
            IsRobot = input.ReadBool();
            break;
          }
          case 74: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////队伍信息meta
  /// </summary>
  public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      minPlayers_ = other.minPlayers_;
      maxPlayers_ = other.maxPlayers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// 队伍 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 队伍名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_players" field.</summary>
    public const int MinPlayersFieldNumber = 3;
    private uint minPlayers_;
    /// <summary>
    //// 队伍最小人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinPlayers {
      get { return minPlayers_; }
      set {
        minPlayers_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 4;
    private uint maxPlayers_;
    /// <summary>
    //// 队伍最大人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MinPlayers != other.MinPlayers) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MinPlayers != 0) hash ^= MinPlayers.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MinPlayers != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinPlayers);
      }
      if (MaxPlayers != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxPlayers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MinPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinPlayers);
      }
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MinPlayers != 0) {
        MinPlayers = other.MinPlayers;
      }
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MinPlayers = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxPlayers = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 房间信息meta
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      createType_ = other.createType_;
      maxPlayers_ = other.maxPlayers_;
      owner_ = other.owner_;
      isPrivate_ = other.isPrivate_;
      customProperties_ = other.customProperties_;
      playerList_ = other.playerList_.Clone();
      teamList_ = other.teamList_.Clone();
      frameSyncState_ = other.frameSyncState_;
      frameRate_ = other.frameRate_;
      routeId_ = other.routeId_;
      createTime_ = other.createTime_;
      startGameTime_ = other.startGameTime_;
      isForbidJoin_ = other.isForbidJoin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    //// 房间的类型，自定义，透传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_type" field.</summary>
    public const int CreateTypeFieldNumber = 4;
    private global::Lagame.CreateRoomType createType_ = global::Lagame.CreateRoomType.CommonCreate;
    /// <summary>
    //// 创建房间方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.CreateRoomType CreateType {
      get { return createType_; }
      set {
        createType_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 5;
    private ulong maxPlayers_;
    /// <summary>
    //// 房间内最大用户数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 6;
    private string owner_ = "";
    /// <summary>
    //// 房主 player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_private" field.</summary>
    public const int IsPrivateFieldNumber = 9;
    private bool isPrivate_;
    /// <summary>
    //// 是否允许匹配加房
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 10;
    private string customProperties_ = "";
    /// <summary>
    //// 开发商自定义房间属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_list" field.</summary>
    public const int PlayerListFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Lagame.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(90, global::Lagame.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Lagame.PlayerInfo> playerList_ = new pbc::RepeatedField<global::Lagame.PlayerInfo>();
    /// <summary>
    //// 房间内用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "team_list" field.</summary>
    public const int TeamListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Lagame.TeamInfo> _repeated_teamList_codec
        = pb::FieldCodec.ForMessage(106, global::Lagame.TeamInfo.Parser);
    private readonly pbc::RepeatedField<global::Lagame.TeamInfo> teamList_ = new pbc::RepeatedField<global::Lagame.TeamInfo>();
    /// <summary>
    //// 队伍信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.TeamInfo> TeamList {
      get { return teamList_; }
    }

    /// <summary>Field number for the "frame_sync_state" field.</summary>
    public const int FrameSyncStateFieldNumber = 14;
    private global::Lagame.FrameSyncState frameSyncState_ = global::Lagame.FrameSyncState.Stop;
    /// <summary>
    //// 房间帧同步状态：0未开始帧同步；1已开始帧同步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.FrameSyncState FrameSyncState {
      get { return frameSyncState_; }
      set {
        frameSyncState_ = value;
      }
    }

    /// <summary>Field number for the "frame_rate" field.</summary>
    public const int FrameRateFieldNumber = 15;
    private uint frameRate_;
    /// <summary>
    //// 帧率，有效范围[5-30]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameRate {
      get { return frameRate_; }
      set {
        frameRate_ = value;
      }
    }

    /// <summary>Field number for the "route_id" field.</summary>
    public const int RouteIdFieldNumber = 16;
    private string routeId_ = "";
    /// <summary>
    //// 路由id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouteId {
      get { return routeId_; }
      set {
        routeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 17;
    private ulong createTime_;
    /// <summary>
    //// 创建房间时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "start_game_time" field.</summary>
    public const int StartGameTimeFieldNumber = 18;
    private ulong startGameTime_;
    /// <summary>
    //// 开始游戏时间， 默认为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartGameTime {
      get { return startGameTime_; }
      set {
        startGameTime_ = value;
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 19;
    private bool isForbidJoin_;
    /// <summary>
    //// 房间是否禁止加人，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (CreateType != other.CreateType) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (Owner != other.Owner) return false;
      if (IsPrivate != other.IsPrivate) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      if(!teamList_.Equals(other.teamList_)) return false;
      if (FrameSyncState != other.FrameSyncState) return false;
      if (FrameRate != other.FrameRate) return false;
      if (RouteId != other.RouteId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (StartGameTime != other.StartGameTime) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (CreateType != global::Lagame.CreateRoomType.CommonCreate) hash ^= CreateType.GetHashCode();
      if (MaxPlayers != 0UL) hash ^= MaxPlayers.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      hash ^= playerList_.GetHashCode();
      hash ^= teamList_.GetHashCode();
      if (FrameSyncState != global::Lagame.FrameSyncState.Stop) hash ^= FrameSyncState.GetHashCode();
      if (FrameRate != 0) hash ^= FrameRate.GetHashCode();
      if (RouteId.Length != 0) hash ^= RouteId.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (StartGameTime != 0UL) hash ^= StartGameTime.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (CreateType != global::Lagame.CreateRoomType.CommonCreate) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CreateType);
      }
      if (MaxPlayers != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxPlayers);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Owner);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsPrivate);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CustomProperties);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      teamList_.WriteTo(output, _repeated_teamList_codec);
      if (FrameSyncState != global::Lagame.FrameSyncState.Stop) {
        output.WriteRawTag(112);
        output.WriteEnum((int) FrameSyncState);
      }
      if (FrameRate != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(FrameRate);
      }
      if (RouteId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(RouteId);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(CreateTime);
      }
      if (StartGameTime != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(StartGameTime);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsForbidJoin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (CreateType != global::Lagame.CreateRoomType.CommonCreate) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CreateType);
      }
      if (MaxPlayers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPlayers);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      size += teamList_.CalculateSize(_repeated_teamList_codec);
      if (FrameSyncState != global::Lagame.FrameSyncState.Stop) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FrameSyncState);
      }
      if (FrameRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameRate);
      }
      if (RouteId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RouteId);
      }
      if (CreateTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (StartGameTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(StartGameTime);
      }
      if (IsForbidJoin != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.CreateType != global::Lagame.CreateRoomType.CommonCreate) {
        CreateType = other.CreateType;
      }
      if (other.MaxPlayers != 0UL) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      playerList_.Add(other.playerList_);
      teamList_.Add(other.teamList_);
      if (other.FrameSyncState != global::Lagame.FrameSyncState.Stop) {
        FrameSyncState = other.FrameSyncState;
      }
      if (other.FrameRate != 0) {
        FrameRate = other.FrameRate;
      }
      if (other.RouteId.Length != 0) {
        RouteId = other.RouteId;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.StartGameTime != 0UL) {
        StartGameTime = other.StartGameTime;
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            CreateType = (global::Lagame.CreateRoomType) input.ReadEnum();
            break;
          }
          case 40: {
            MaxPlayers = input.ReadUInt64();
            break;
          }
          case 50: {
            Owner = input.ReadString();
            break;
          }
          case 72: {
            IsPrivate = input.ReadBool();
            break;
          }
          case 82: {
            CustomProperties = input.ReadString();
            break;
          }
          case 90: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 106: {
            teamList_.AddEntriesFrom(input, _repeated_teamList_codec);
            break;
          }
          case 112: {
            FrameSyncState = (global::Lagame.FrameSyncState) input.ReadEnum();
            break;
          }
          case 120: {
            FrameRate = input.ReadUInt32();
            break;
          }
          case 130: {
            RouteId = input.ReadString();
            break;
          }
          case 136: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 144: {
            StartGameTime = input.ReadUInt64();
            break;
          }
          case 152: {
            IsForbidJoin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///创建房间请求信息
  //////uint64 game_id /// 游戏id，access层鉴权并放在外层协议体
  /// </summary>
  public sealed partial class CreateRoomReq : pb::IMessage<CreateRoomReq> {
    private static readonly pb::MessageParser<CreateRoomReq> _parser = new pb::MessageParser<CreateRoomReq>(() => new CreateRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq(CreateRoomReq other) : this() {
      roomName_ = other.roomName_;
      roomType_ = other.roomType_;
      createType_ = other.createType_;
      maxPlayers_ = other.maxPlayers_;
      isPrivate_ = other.isPrivate_;
      customProperties_ = other.customProperties_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      region_ = other.region_;
      owner_ = other.owner_;
      playerList_ = other.playerList_.Clone();
      teamList_ = other.teamList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq Clone() {
      return new CreateRoomReq(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    /// <summary>
    //// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 2;
    private string roomType_ = "";
    /// <summary>
    //// 房间的类型，自定义，透传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_type" field.</summary>
    public const int CreateTypeFieldNumber = 3;
    private global::Lagame.CreateRoomType createType_ = global::Lagame.CreateRoomType.CommonCreate;
    /// <summary>
    //// [rm-sdk-para] 创建方式：1.单人主动发起创建房间请求。2.多人在线匹配请求分配房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.CreateRoomType CreateType {
      get { return createType_; }
      set {
        createType_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 4;
    private ulong maxPlayers_;
    /// <summary>
    //// 房间内最大用户数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "is_private" field.</summary>
    public const int IsPrivateFieldNumber = 7;
    private bool isPrivate_;
    /// <summary>
    //// 是否私有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 8;
    private string customProperties_ = "";
    /// <summary>
    //// 开发商自定义房间属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 9;
    private global::Lagame.PlayerInfo playerInfo_;
    /// <summary>
    //// 房主用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 11;
    private string region_ = "";
    /// <summary>
    //// [rm-sdk-para] 当房间为在线匹配创建的时候需要传,为owner的region
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 12;
    private string owner_ = "";
    /// <summary>
    //// [rm-sdk-para] 当房间为在线匹配创建的时候需要传, openId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_list" field.</summary>
    public const int PlayerListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Lagame.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(106, global::Lagame.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Lagame.PlayerInfo> playerList_ = new pbc::RepeatedField<global::Lagame.PlayerInfo>();
    /// <summary>
    //// [rm-sdk-para] 当房间为在线匹配创建的时候需要传 MATCHCREATE 匹配创建时用到, 匹配到的成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "team_list" field.</summary>
    public const int TeamListFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Lagame.TeamInfo> _repeated_teamList_codec
        = pb::FieldCodec.ForMessage(114, global::Lagame.TeamInfo.Parser);
    private readonly pbc::RepeatedField<global::Lagame.TeamInfo> teamList_ = new pbc::RepeatedField<global::Lagame.TeamInfo>();
    /// <summary>
    //// [rm-sdk-para] 当房间为在线匹配创建的时候需要传：teamid player_info_list 齐
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.TeamInfo> TeamList {
      get { return teamList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (RoomType != other.RoomType) return false;
      if (CreateType != other.CreateType) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (IsPrivate != other.IsPrivate) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (Region != other.Region) return false;
      if (Owner != other.Owner) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      if(!teamList_.Equals(other.teamList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (RoomType.Length != 0) hash ^= RoomType.GetHashCode();
      if (CreateType != global::Lagame.CreateRoomType.CommonCreate) hash ^= CreateType.GetHashCode();
      if (MaxPlayers != 0UL) hash ^= MaxPlayers.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      hash ^= playerList_.GetHashCode();
      hash ^= teamList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (RoomType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomType);
      }
      if (CreateType != global::Lagame.CreateRoomType.CommonCreate) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CreateType);
      }
      if (MaxPlayers != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MaxPlayers);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsPrivate);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CustomProperties);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PlayerInfo);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Region);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Owner);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      teamList_.WriteTo(output, _repeated_teamList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (CreateType != global::Lagame.CreateRoomType.CommonCreate) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CreateType);
      }
      if (MaxPlayers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPlayers);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      size += teamList_.CalculateSize(_repeated_teamList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.RoomType.Length != 0) {
        RoomType = other.RoomType;
      }
      if (other.CreateType != global::Lagame.CreateRoomType.CommonCreate) {
        CreateType = other.CreateType;
      }
      if (other.MaxPlayers != 0UL) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::Lagame.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      playerList_.Add(other.playerList_);
      teamList_.Add(other.teamList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            RoomType = input.ReadString();
            break;
          }
          case 24: {
            CreateType = (global::Lagame.CreateRoomType) input.ReadEnum();
            break;
          }
          case 32: {
            MaxPlayers = input.ReadUInt64();
            break;
          }
          case 56: {
            IsPrivate = input.ReadBool();
            break;
          }
          case 66: {
            CustomProperties = input.ReadString();
            break;
          }
          case 74: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Lagame.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 90: {
            Region = input.ReadString();
            break;
          }
          case 98: {
            Owner = input.ReadString();
            break;
          }
          case 106: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 114: {
            teamList_.AddEntriesFrom(input, _repeated_teamList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///创建房间返回信息
  /// </summary>
  public sealed partial class CreateRoomRsp : pb::IMessage<CreateRoomRsp> {
    private static readonly pb::MessageParser<CreateRoomRsp> _parser = new pb::MessageParser<CreateRoomRsp>(() => new CreateRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp(CreateRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp Clone() {
      return new CreateRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 返回创建好的房间信息，里面包含userList加入房间的用户信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///加入房间请求信息
  /// </summary>
  public sealed partial class JoinRoomReq : pb::IMessage<JoinRoomReq> {
    private static readonly pb::MessageParser<JoinRoomReq> _parser = new pb::MessageParser<JoinRoomReq>(() => new JoinRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq(JoinRoomReq other) : this() {
      roomId_ = other.roomId_;
      teamId_ = other.teamId_;
      joinType_ = other.joinType_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq Clone() {
      return new JoinRoomReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para] roomId  1类和2类都要传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "join_type" field.</summary>
    public const int JoinTypeFieldNumber = 3;
    private global::Lagame.JoinRoomType joinType_ = global::Lagame.JoinRoomType.CommonJoin;
    /// <summary>
    //// [rm-sdk-para] 操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.JoinRoomType JoinType {
      get { return joinType_; }
      set {
        joinType_ = value;
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 4;
    private global::Lagame.PlayerInfo playerInfo_;
    /// <summary>
    //// 申请加入房间的用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (TeamId != other.TeamId) return false;
      if (JoinType != other.JoinType) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (JoinType != global::Lagame.JoinRoomType.CommonJoin) hash ^= JoinType.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamId);
      }
      if (JoinType != global::Lagame.JoinRoomType.CommonJoin) {
        output.WriteRawTag(24);
        output.WriteEnum((int) JoinType);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (JoinType != global::Lagame.JoinRoomType.CommonJoin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinType);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.JoinType != global::Lagame.JoinRoomType.CommonJoin) {
        JoinType = other.JoinType;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::Lagame.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            TeamId = input.ReadString();
            break;
          }
          case 24: {
            JoinType = (global::Lagame.JoinRoomType) input.ReadEnum();
            break;
          }
          case 34: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Lagame.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///加入房间返回信息
  /// </summary>
  public sealed partial class JoinRoomRsp : pb::IMessage<JoinRoomRsp> {
    private static readonly pb::MessageParser<JoinRoomRsp> _parser = new pb::MessageParser<JoinRoomRsp>(() => new JoinRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp(JoinRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp Clone() {
      return new JoinRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 返回加入后的房间信息，里面包含userList所有加入房间的用户信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///离开房间请求信息
  /// </summary>
  public sealed partial class LeaveRoomReq : pb::IMessage<LeaveRoomReq> {
    private static readonly pb::MessageParser<LeaveRoomReq> _parser = new pb::MessageParser<LeaveRoomReq>(() => new LeaveRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq(LeaveRoomReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq Clone() {
      return new LeaveRoomReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///离开房间返回信息
  /// </summary>
  public sealed partial class LeaveRoomRsp : pb::IMessage<LeaveRoomRsp> {
    private static readonly pb::MessageParser<LeaveRoomRsp> _parser = new pb::MessageParser<LeaveRoomRsp>(() => new LeaveRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp(LeaveRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp Clone() {
      return new LeaveRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///解散房间，即销毁房间请求信息(仅房主可操作)
  /// </summary>
  public sealed partial class DismissRoomReq : pb::IMessage<DismissRoomReq> {
    private static readonly pb::MessageParser<DismissRoomReq> _parser = new pb::MessageParser<DismissRoomReq>(() => new DismissRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomReq(DismissRoomReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomReq Clone() {
      return new DismissRoomReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissRoomReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///解散房间返回信息
  /// </summary>
  public sealed partial class DismissRoomRsp : pb::IMessage<DismissRoomRsp> {
    private static readonly pb::MessageParser<DismissRoomRsp> _parser = new pb::MessageParser<DismissRoomRsp>(() => new DismissRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomRsp(DismissRoomRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomRsp Clone() {
      return new DismissRoomRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissRoomRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间变更操作请求信息，个别信息需限制房主操作
  /// </summary>
  public sealed partial class ChangeRoomReq : pb::IMessage<ChangeRoomReq> {
    private static readonly pb::MessageParser<ChangeRoomReq> _parser = new pb::MessageParser<ChangeRoomReq>(() => new ChangeRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomReq(ChangeRoomReq other) : this() {
      roomName_ = other.roomName_;
      owner_ = other.owner_;
      isPrivate_ = other.isPrivate_;
      customProperties_ = other.customProperties_;
      isForbidJoin_ = other.isForbidJoin_;
      changeRoomOptionList_ = other.changeRoomOptionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomReq Clone() {
      return new ChangeRoomReq(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    /// <summary>
    //// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private string owner_ = "";
    /// <summary>
    //// 变更房主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_private" field.</summary>
    public const int IsPrivateFieldNumber = 5;
    private bool isPrivate_;
    /// <summary>
    //// 是否私有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 6;
    private string customProperties_ = "";
    /// <summary>
    //// 开发商自定义房间属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 7;
    private bool isForbidJoin_;
    /// <summary>
    //// 房间是否禁止加人，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    /// <summary>Field number for the "change_room_option_list" field.</summary>
    public const int ChangeRoomOptionListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Lagame.ChangeRoomOption> _repeated_changeRoomOptionList_codec
        = pb::FieldCodec.ForEnum(66, x => (int) x, x => (global::Lagame.ChangeRoomOption) x);
    private readonly pbc::RepeatedField<global::Lagame.ChangeRoomOption> changeRoomOptionList_ = new pbc::RepeatedField<global::Lagame.ChangeRoomOption>();
    /// <summary>
    //// [rm-sdk-para] 修改字段列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.ChangeRoomOption> ChangeRoomOptionList {
      get { return changeRoomOptionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (Owner != other.Owner) return false;
      if (IsPrivate != other.IsPrivate) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      if(!changeRoomOptionList_.Equals(other.changeRoomOptionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      hash ^= changeRoomOptionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Owner);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPrivate);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CustomProperties);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsForbidJoin);
      }
      changeRoomOptionList_.WriteTo(output, _repeated_changeRoomOptionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (IsForbidJoin != false) {
        size += 1 + 1;
      }
      size += changeRoomOptionList_.CalculateSize(_repeated_changeRoomOptionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      changeRoomOptionList_.Add(other.changeRoomOptionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            Owner = input.ReadString();
            break;
          }
          case 40: {
            IsPrivate = input.ReadBool();
            break;
          }
          case 50: {
            CustomProperties = input.ReadString();
            break;
          }
          case 56: {
            IsForbidJoin = input.ReadBool();
            break;
          }
          case 66:
          case 64: {
            changeRoomOptionList_.AddEntriesFrom(input, _repeated_changeRoomOptionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间变更操作返回信息
  /// </summary>
  public sealed partial class ChangeRoomRsp : pb::IMessage<ChangeRoomRsp> {
    private static readonly pb::MessageParser<ChangeRoomRsp> _parser = new pb::MessageParser<ChangeRoomRsp>(() => new ChangeRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomRsp(ChangeRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomRsp Clone() {
      return new ChangeRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 4;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 变更后的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务端房间变更操作请求信息
  /// </summary>
  public sealed partial class SvrChangeRoomReq : pb::IMessage<SvrChangeRoomReq> {
    private static readonly pb::MessageParser<SvrChangeRoomReq> _parser = new pb::MessageParser<SvrChangeRoomReq>(() => new SvrChangeRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrChangeRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomReq(SvrChangeRoomReq other) : this() {
      roomName_ = other.roomName_;
      owner_ = other.owner_;
      isPrivate_ = other.isPrivate_;
      customProperties_ = other.customProperties_;
      isForbidJoin_ = other.isForbidJoin_;
      roomId_ = other.roomId_;
      changeRoomOptionList_ = other.changeRoomOptionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomReq Clone() {
      return new SvrChangeRoomReq(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    /// <summary>
    //// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private string owner_ = "";
    /// <summary>
    //// 变更房主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_private" field.</summary>
    public const int IsPrivateFieldNumber = 5;
    private bool isPrivate_;
    /// <summary>
    //// 是否私有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 6;
    private string customProperties_ = "";
    /// <summary>
    //// 开发商自定义房间属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 7;
    private bool isForbidJoin_;
    /// <summary>
    //// 房间是否禁止加人，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 8;
    private string roomId_ = "";
    /// <summary>
    //// 待变更的房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "change_room_option_list" field.</summary>
    public const int ChangeRoomOptionListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Lagame.ChangeRoomOption> _repeated_changeRoomOptionList_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::Lagame.ChangeRoomOption) x);
    private readonly pbc::RepeatedField<global::Lagame.ChangeRoomOption> changeRoomOptionList_ = new pbc::RepeatedField<global::Lagame.ChangeRoomOption>();
    /// <summary>
    //// 修改字段列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.ChangeRoomOption> ChangeRoomOptionList {
      get { return changeRoomOptionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrChangeRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrChangeRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (Owner != other.Owner) return false;
      if (IsPrivate != other.IsPrivate) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      if (RoomId != other.RoomId) return false;
      if(!changeRoomOptionList_.Equals(other.changeRoomOptionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      hash ^= changeRoomOptionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Owner);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPrivate);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CustomProperties);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsForbidJoin);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RoomId);
      }
      changeRoomOptionList_.WriteTo(output, _repeated_changeRoomOptionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (IsForbidJoin != false) {
        size += 1 + 1;
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      size += changeRoomOptionList_.CalculateSize(_repeated_changeRoomOptionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrChangeRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      changeRoomOptionList_.Add(other.changeRoomOptionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            Owner = input.ReadString();
            break;
          }
          case 40: {
            IsPrivate = input.ReadBool();
            break;
          }
          case 50: {
            CustomProperties = input.ReadString();
            break;
          }
          case 56: {
            IsForbidJoin = input.ReadBool();
            break;
          }
          case 66: {
            RoomId = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            changeRoomOptionList_.AddEntriesFrom(input, _repeated_changeRoomOptionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务端房间变更操作返回信息
  /// </summary>
  public sealed partial class SvrChangeRoomRsp : pb::IMessage<SvrChangeRoomRsp> {
    private static readonly pb::MessageParser<SvrChangeRoomRsp> _parser = new pb::MessageParser<SvrChangeRoomRsp>(() => new SvrChangeRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrChangeRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomRsp(SvrChangeRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomRsp Clone() {
      return new SvrChangeRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 4;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 变更后的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrChangeRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrChangeRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrChangeRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///踢人操作请求信息
  /// </summary>
  public sealed partial class RemovePlayerReq : pb::IMessage<RemovePlayerReq> {
    private static readonly pb::MessageParser<RemovePlayerReq> _parser = new pb::MessageParser<RemovePlayerReq>(() => new RemovePlayerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemovePlayerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerReq(RemovePlayerReq other) : this() {
      removePlayerId_ = other.removePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerReq Clone() {
      return new RemovePlayerReq(this);
    }

    /// <summary>Field number for the "remove_player_id" field.</summary>
    public const int RemovePlayerIdFieldNumber = 3;
    private string removePlayerId_ = "";
    /// <summary>
    //// 要删除的userID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemovePlayerId {
      get { return removePlayerId_; }
      set {
        removePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemovePlayerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemovePlayerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RemovePlayerId != other.RemovePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RemovePlayerId.Length != 0) hash ^= RemovePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemovePlayerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RemovePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemovePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemovePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemovePlayerReq other) {
      if (other == null) {
        return;
      }
      if (other.RemovePlayerId.Length != 0) {
        RemovePlayerId = other.RemovePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            RemovePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///踢人操作返回信息
  /// </summary>
  public sealed partial class RemovePlayerRsp : pb::IMessage<RemovePlayerRsp> {
    private static readonly pb::MessageParser<RemovePlayerRsp> _parser = new pb::MessageParser<RemovePlayerRsp>(() => new RemovePlayerRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemovePlayerRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerRsp(RemovePlayerRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerRsp Clone() {
      return new RemovePlayerRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemovePlayerRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemovePlayerRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemovePlayerRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务器踢人操作请求信息
  /// </summary>
  public sealed partial class SvrRemovePlayerReq : pb::IMessage<SvrRemovePlayerReq> {
    private static readonly pb::MessageParser<SvrRemovePlayerReq> _parser = new pb::MessageParser<SvrRemovePlayerReq>(() => new SvrRemovePlayerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrRemovePlayerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerReq(SvrRemovePlayerReq other) : this() {
      roomId_ = other.roomId_;
      removePlayerId_ = other.removePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerReq Clone() {
      return new SvrRemovePlayerReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// roomID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remove_player_id" field.</summary>
    public const int RemovePlayerIdFieldNumber = 3;
    private string removePlayerId_ = "";
    /// <summary>
    //// 要删除的userID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemovePlayerId {
      get { return removePlayerId_; }
      set {
        removePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrRemovePlayerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrRemovePlayerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RemovePlayerId != other.RemovePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (RemovePlayerId.Length != 0) hash ^= RemovePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (RemovePlayerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RemovePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (RemovePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemovePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrRemovePlayerReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.RemovePlayerId.Length != 0) {
        RemovePlayerId = other.RemovePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 26: {
            RemovePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务器踢人操作返回信息
  /// </summary>
  public sealed partial class SvrRemovePlayerRsp : pb::IMessage<SvrRemovePlayerRsp> {
    private static readonly pb::MessageParser<SvrRemovePlayerRsp> _parser = new pb::MessageParser<SvrRemovePlayerRsp>(() => new SvrRemovePlayerRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrRemovePlayerRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerRsp(SvrRemovePlayerRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerRsp Clone() {
      return new SvrRemovePlayerRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrRemovePlayerRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrRemovePlayerRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrRemovePlayerRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///查询房间信息请求
  /// </summary>
  public sealed partial class GetRoomByRoomIdReq : pb::IMessage<GetRoomByRoomIdReq> {
    private static readonly pb::MessageParser<GetRoomByRoomIdReq> _parser = new pb::MessageParser<GetRoomByRoomIdReq>(() => new GetRoomByRoomIdReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomByRoomIdReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdReq(GetRoomByRoomIdReq other) : this() {
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdReq Clone() {
      return new GetRoomByRoomIdReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// 房间ID、填0则查询用户所在的房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomByRoomIdReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomByRoomIdReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomByRoomIdReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///查询房间信息返回
  /// </summary>
  public sealed partial class GetRoomByRoomIdRsp : pb::IMessage<GetRoomByRoomIdRsp> {
    private static readonly pb::MessageParser<GetRoomByRoomIdRsp> _parser = new pb::MessageParser<GetRoomByRoomIdRsp>(() => new GetRoomByRoomIdRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomByRoomIdRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdRsp(GetRoomByRoomIdRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdRsp Clone() {
      return new GetRoomByRoomIdRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomByRoomIdRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomByRoomIdRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomByRoomIdRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间内消息发送
  /// </summary>
  public sealed partial class SendToClientReq : pb::IMessage<SendToClientReq> {
    private static readonly pb::MessageParser<SendToClientReq> _parser = new pb::MessageParser<SendToClientReq>(() => new SendToClientReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToClientReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientReq(SendToClientReq other) : this() {
      roomId_ = other.roomId_;
      recvPlayerList_ = other.recvPlayerList_.Clone();
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientReq Clone() {
      return new SendToClientReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para] 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recv_player_list" field.</summary>
    public const int RecvPlayerListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_recvPlayerList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> recvPlayerList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 接收信息的用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecvPlayerList {
      get { return recvPlayerList_; }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    //// 消息详细内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToClientReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToClientReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if(!recvPlayerList_.Equals(other.recvPlayerList_)) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      hash ^= recvPlayerList_.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      recvPlayerList_.WriteTo(output, _repeated_recvPlayerList_codec);
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      size += recvPlayerList_.CalculateSize(_repeated_recvPlayerList_codec);
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToClientReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      recvPlayerList_.Add(other.recvPlayerList_);
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            recvPlayerList_.AddEntriesFrom(input, _repeated_recvPlayerList_codec);
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间内消息返回
  /// </summary>
  public sealed partial class SendToClientRsp : pb::IMessage<SendToClientRsp> {
    private static readonly pb::MessageParser<SendToClientRsp> _parser = new pb::MessageParser<SendToClientRsp>(() => new SendToClientRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToClientRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientRsp(SendToClientRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientRsp Clone() {
      return new SendToClientRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToClientRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToClientRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToClientRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户状态请求
  /// </summary>
  public sealed partial class ChangeCustomPlayerStatusReq : pb::IMessage<ChangeCustomPlayerStatusReq> {
    private static readonly pb::MessageParser<ChangeCustomPlayerStatusReq> _parser = new pb::MessageParser<ChangeCustomPlayerStatusReq>(() => new ChangeCustomPlayerStatusReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomPlayerStatusReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusReq(ChangeCustomPlayerStatusReq other) : this() {
      customPlayerStatus_ = other.customPlayerStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusReq Clone() {
      return new ChangeCustomPlayerStatusReq(this);
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 1;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户自定义状态状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomPlayerStatusReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomPlayerStatusReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomPlayerStatusReq other) {
      if (other == null) {
        return;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户状态返回
  /// </summary>
  public sealed partial class ChangeCustomPlayerStatusRsp : pb::IMessage<ChangeCustomPlayerStatusRsp> {
    private static readonly pb::MessageParser<ChangeCustomPlayerStatusRsp> _parser = new pb::MessageParser<ChangeCustomPlayerStatusRsp>(() => new ChangeCustomPlayerStatusRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomPlayerStatusRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusRsp(ChangeCustomPlayerStatusRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusRsp Clone() {
      return new ChangeCustomPlayerStatusRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomPlayerStatusRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomPlayerStatusRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomPlayerStatusRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务端更改用户状态请求
  /// </summary>
  public sealed partial class SvrChangeCustomPlayerStatusReq : pb::IMessage<SvrChangeCustomPlayerStatusReq> {
    private static readonly pb::MessageParser<SvrChangeCustomPlayerStatusReq> _parser = new pb::MessageParser<SvrChangeCustomPlayerStatusReq>(() => new SvrChangeCustomPlayerStatusReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrChangeCustomPlayerStatusReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusReq(SvrChangeCustomPlayerStatusReq other) : this() {
      customPlayerStatus_ = other.customPlayerStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusReq Clone() {
      return new SvrChangeCustomPlayerStatusReq(this);
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 1;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户自定义状态状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrChangeCustomPlayerStatusReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrChangeCustomPlayerStatusReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrChangeCustomPlayerStatusReq other) {
      if (other == null) {
        return;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务端更改用户状态返回
  /// </summary>
  public sealed partial class SvrChangeCustomPlayerStatusRsp : pb::IMessage<SvrChangeCustomPlayerStatusRsp> {
    private static readonly pb::MessageParser<SvrChangeCustomPlayerStatusRsp> _parser = new pb::MessageParser<SvrChangeCustomPlayerStatusRsp>(() => new SvrChangeCustomPlayerStatusRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrChangeCustomPlayerStatusRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusRsp(SvrChangeCustomPlayerStatusRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusRsp Clone() {
      return new SvrChangeCustomPlayerStatusRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrChangeCustomPlayerStatusRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrChangeCustomPlayerStatusRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrChangeCustomPlayerStatusRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户网络状态请求
  /// </summary>
  public sealed partial class ChangePlayerNetworkStateReq : pb::IMessage<ChangePlayerNetworkStateReq> {
    private static readonly pb::MessageParser<ChangePlayerNetworkStateReq> _parser = new pb::MessageParser<ChangePlayerNetworkStateReq>(() => new ChangePlayerNetworkStateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePlayerNetworkStateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateReq(ChangePlayerNetworkStateReq other) : this() {
      networkState_ = other.networkState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateReq Clone() {
      return new ChangePlayerNetworkStateReq(this);
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 1;
    private global::Lagame.NetworkState networkState_ = global::Lagame.NetworkState.CommonOffline;
    /// <summary>
    //// 网络状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.NetworkState NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePlayerNetworkStateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePlayerNetworkStateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetworkState != other.NetworkState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetworkState != global::Lagame.NetworkState.CommonOffline) hash ^= NetworkState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkState != global::Lagame.NetworkState.CommonOffline) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NetworkState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetworkState != global::Lagame.NetworkState.CommonOffline) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePlayerNetworkStateReq other) {
      if (other == null) {
        return;
      }
      if (other.NetworkState != global::Lagame.NetworkState.CommonOffline) {
        NetworkState = other.NetworkState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetworkState = (global::Lagame.NetworkState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangePlayerNetworkStateRsp : pb::IMessage<ChangePlayerNetworkStateRsp> {
    private static readonly pb::MessageParser<ChangePlayerNetworkStateRsp> _parser = new pb::MessageParser<ChangePlayerNetworkStateRsp>(() => new ChangePlayerNetworkStateRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePlayerNetworkStateRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateRsp(ChangePlayerNetworkStateRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateRsp Clone() {
      return new ChangePlayerNetworkStateRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePlayerNetworkStateRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePlayerNetworkStateRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePlayerNetworkStateRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///拉取房间列表
  /// </summary>
  public sealed partial class GetRoomListReq : pb::IMessage<GetRoomListReq> {
    private static readonly pb::MessageParser<GetRoomListReq> _parser = new pb::MessageParser<GetRoomListReq>(() => new GetRoomListReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListReq(GetRoomListReq other) : this() {
      gameId_ = other.gameId_;
      pageNo_ = other.pageNo_;
      pageSize_ = other.pageSize_;
      roomType_ = other.roomType_;
      isDesc_ = other.isDesc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListReq Clone() {
      return new GetRoomListReq(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    /// <summary>
    //// [rm-sdk-para] 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_no" field.</summary>
    public const int PageNoFieldNumber = 2;
    private uint pageNo_;
    /// <summary>
    //// 一页大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNo {
      get { return pageNo_; }
      set {
        pageNo_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private uint pageSize_;
    /// <summary>
    //// 页数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 4;
    private string roomType_ = "";
    /// <summary>
    //// 房间类型, 传"" 拉去所有类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_desc" field.</summary>
    public const int IsDescFieldNumber = 5;
    private bool isDesc_;
    /// <summary>
    //// 按照房间创建时间倒序，默认顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDesc {
      get { return isDesc_; }
      set {
        isDesc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (PageNo != other.PageNo) return false;
      if (PageSize != other.PageSize) return false;
      if (RoomType != other.RoomType) return false;
      if (IsDesc != other.IsDesc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (PageNo != 0) hash ^= PageNo.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (RoomType.Length != 0) hash ^= RoomType.GetHashCode();
      if (IsDesc != false) hash ^= IsDesc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (PageNo != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PageNo);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PageSize);
      }
      if (RoomType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomType);
      }
      if (IsDesc != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsDesc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (PageNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNo);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (IsDesc != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListReq other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.PageNo != 0) {
        PageNo = other.PageNo;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.RoomType.Length != 0) {
        RoomType = other.RoomType;
      }
      if (other.IsDesc != false) {
        IsDesc = other.IsDesc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 16: {
            PageNo = input.ReadUInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 34: {
            RoomType = input.ReadString();
            break;
          }
          case 40: {
            IsDesc = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRoomListRsp : pb::IMessage<GetRoomListRsp> {
    private static readonly pb::MessageParser<GetRoomListRsp> _parser = new pb::MessageParser<GetRoomListRsp>(() => new GetRoomListRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp(GetRoomListRsp other) : this() {
      gameId_ = other.gameId_;
      roomList_ = other.roomList_.Clone();
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp Clone() {
      return new GetRoomListRsp(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    /// <summary>
    //// 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_list" field.</summary>
    public const int RoomListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lagame.RoomInfo> _repeated_roomList_codec
        = pb::FieldCodec.ForMessage(18, global::Lagame.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::Lagame.RoomInfo> roomList_ = new pbc::RepeatedField<global::Lagame.RoomInfo>();
    /// <summary>
    //// 房间列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.RoomInfo> RoomList {
      get { return roomList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private ulong total_;
    /// <summary>
    //// 房间数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if(!roomList_.Equals(other.roomList_)) return false;
      if (Total != other.Total) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      hash ^= roomList_.GetHashCode();
      if (Total != 0UL) hash ^= Total.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      roomList_.WriteTo(output, _repeated_roomList_codec);
      if (Total != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      size += roomList_.CalculateSize(_repeated_roomList_codec);
      if (Total != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Total);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListRsp other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      roomList_.Add(other.roomList_);
      if (other.Total != 0UL) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 18: {
            roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
            break;
          }
          case 24: {
            Total = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间匹配 简单模式
  /// </summary>
  public sealed partial class MatchRoomSimpleReq : pb::IMessage<MatchRoomSimpleReq> {
    private static readonly pb::MessageParser<MatchRoomSimpleReq> _parser = new pb::MessageParser<MatchRoomSimpleReq>(() => new MatchRoomSimpleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRoomSimpleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleReq(MatchRoomSimpleReq other) : this() {
      roomType_ = other.roomType_;
      maxPlayers_ = other.maxPlayers_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleReq Clone() {
      return new MatchRoomSimpleReq(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private string roomType_ = "";
    /// <summary>
    //// 房间类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 2;
    private ulong maxPlayers_;
    /// <summary>
    //// 最大房间人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    private global::Lagame.PlayerInfo playerInfo_;
    /// <summary>
    //// 匹配的用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRoomSimpleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRoomSimpleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomType.Length != 0) hash ^= RoomType.GetHashCode();
      if (MaxPlayers != 0UL) hash ^= MaxPlayers.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomType);
      }
      if (MaxPlayers != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxPlayers);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (MaxPlayers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPlayers);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRoomSimpleReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomType.Length != 0) {
        RoomType = other.RoomType;
      }
      if (other.MaxPlayers != 0UL) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::Lagame.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomType = input.ReadString();
            break;
          }
          case 16: {
            MaxPlayers = input.ReadUInt64();
            break;
          }
          case 26: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Lagame.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchRoomSimpleRsp : pb::IMessage<MatchRoomSimpleRsp> {
    private static readonly pb::MessageParser<MatchRoomSimpleRsp> _parser = new pb::MessageParser<MatchRoomSimpleRsp>(() => new MatchRoomSimpleRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRoomSimpleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleRsp(MatchRoomSimpleRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleRsp Clone() {
      return new MatchRoomSimpleRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    ////加入/创建房间的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRoomSimpleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRoomSimpleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRoomSimpleRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间匹配 复杂模式
  /// </summary>
  public sealed partial class MatchRoomComplexReq : pb::IMessage<MatchRoomComplexReq> {
    private static readonly pb::MessageParser<MatchRoomComplexReq> _parser = new pb::MessageParser<MatchRoomComplexReq>(() => new MatchRoomComplexReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRoomComplexReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexReq(MatchRoomComplexReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexReq Clone() {
      return new MatchRoomComplexReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRoomComplexReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRoomComplexReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRoomComplexReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 待定-规划中
  /// </summary>
  public sealed partial class MatchRoomComplexRsp : pb::IMessage<MatchRoomComplexRsp> {
    private static readonly pb::MessageParser<MatchRoomComplexRsp> _parser = new pb::MessageParser<MatchRoomComplexRsp>(() => new MatchRoomComplexRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRoomComplexRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexRsp(MatchRoomComplexRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexRsp Clone() {
      return new MatchRoomComplexRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRoomComplexRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRoomComplexRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRoomComplexRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配 简单模式
  /// </summary>
  public sealed partial class MatchPlayersSimpleReq : pb::IMessage<MatchPlayersSimpleReq> {
    private static readonly pb::MessageParser<MatchPlayersSimpleReq> _parser = new pb::MessageParser<MatchPlayersSimpleReq>(() => new MatchPlayersSimpleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersSimpleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleReq(MatchPlayersSimpleReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleReq Clone() {
      return new MatchPlayersSimpleReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersSimpleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersSimpleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersSimpleReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 待定-规划中
  /// </summary>
  public sealed partial class MatchPlayersSimpleRsp : pb::IMessage<MatchPlayersSimpleRsp> {
    private static readonly pb::MessageParser<MatchPlayersSimpleRsp> _parser = new pb::MessageParser<MatchPlayersSimpleRsp>(() => new MatchPlayersSimpleRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersSimpleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleRsp(MatchPlayersSimpleRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleRsp Clone() {
      return new MatchPlayersSimpleRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersSimpleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersSimpleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersSimpleRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 个人或者团队的匹配属性
  /// </summary>
  public sealed partial class MatchAttribute : pb::IMessage<MatchAttribute> {
    private static readonly pb::MessageParser<MatchAttribute> _parser = new pb::MessageParser<MatchAttribute>(() => new MatchAttribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAttribute(MatchAttribute other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAttribute Clone() {
      return new MatchAttribute(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ////  属性名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ////  属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchAttribute other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配
  ///player信息
  /// </summary>
  public sealed partial class MatchPlayerInfo : pb::IMessage<MatchPlayerInfo> {
    private static readonly pb::MessageParser<MatchPlayerInfo> _parser = new pb::MessageParser<MatchPlayerInfo>(() => new MatchPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayerInfo(MatchPlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      customPlayerStatus_ = other.customPlayerStatus_;
      customProfile_ = other.customProfile_;
      matchAttributes_ = other.matchAttributes_.Clone();
      matchStatus_ = other.matchStatus_;
      teamId_ = other.teamId_;
      region_ = other.region_;
      teamLeader_ = other.teamLeader_;
      sdkVersion_ = other.sdkVersion_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayerInfo Clone() {
      return new MatchPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// [rm-sdk-para] openid - player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 3;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户状态，客户端透传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "custom_profile" field.</summary>
    public const int CustomProfileFieldNumber = 4;
    private string customProfile_ = "";
    /// <summary>
    //// 用户的其他属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProfile {
      get { return customProfile_; }
      set {
        customProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Lagame.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(42, global::Lagame.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::Lagame.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::Lagame.MatchAttribute>();
    /// <summary>
    //// 属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "match_status" field.</summary>
    public const int MatchStatusFieldNumber = 6;
    private global::Lagame.MatchStatus matchStatus_ = global::Lagame.MatchStatus.Pending;
    /// <summary>
    //// [rm-sdk-para] bk：匹配状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.MatchStatus MatchStatus {
      get { return matchStatus_; }
      set {
        matchStatus_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 7;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：团队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 8;
    private string region_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：玩家现在所处的匹配区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_leader" field.</summary>
    public const int TeamLeaderFieldNumber = 9;
    private string teamLeader_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：队长的openId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamLeader {
      get { return teamLeader_; }
      set {
        teamLeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_version" field.</summary>
    public const int SdkVersionFieldNumber = 10;
    private string sdkVersion_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 11;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：player set id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      if (CustomProfile != other.CustomProfile) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if (MatchStatus != other.MatchStatus) return false;
      if (TeamId != other.TeamId) return false;
      if (Region != other.Region) return false;
      if (TeamLeader != other.TeamLeader) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (CustomProfile.Length != 0) hash ^= CustomProfile.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (MatchStatus != global::Lagame.MatchStatus.Pending) hash ^= MatchStatus.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (TeamLeader.Length != 0) hash ^= TeamLeader.GetHashCode();
      if (SdkVersion.Length != 0) hash ^= SdkVersion.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CustomProfile);
      }
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (MatchStatus != global::Lagame.MatchStatus.Pending) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MatchStatus);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TeamId);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Region);
      }
      if (TeamLeader.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TeamLeader);
      }
      if (SdkVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SdkVersion);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProfile);
      }
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (MatchStatus != global::Lagame.MatchStatus.Pending) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchStatus);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (TeamLeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamLeader);
      }
      if (SdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVersion);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      if (other.CustomProfile.Length != 0) {
        CustomProfile = other.CustomProfile;
      }
      matchAttributes_.Add(other.matchAttributes_);
      if (other.MatchStatus != global::Lagame.MatchStatus.Pending) {
        MatchStatus = other.MatchStatus;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.TeamLeader.Length != 0) {
        TeamLeader = other.TeamLeader;
      }
      if (other.SdkVersion.Length != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
          case 34: {
            CustomProfile = input.ReadString();
            break;
          }
          case 42: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 48: {
            MatchStatus = (global::Lagame.MatchStatus) input.ReadEnum();
            break;
          }
          case 58: {
            TeamId = input.ReadString();
            break;
          }
          case 66: {
            Region = input.ReadString();
            break;
          }
          case 74: {
            TeamLeader = input.ReadString();
            break;
          }
          case 82: {
            SdkVersion = input.ReadString();
            break;
          }
          case 90: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchGroupPlayerInfo : pb::IMessage<MatchGroupPlayerInfo> {
    private static readonly pb::MessageParser<MatchGroupPlayerInfo> _parser = new pb::MessageParser<MatchGroupPlayerInfo>(() => new MatchGroupPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchGroupPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupPlayerInfo(MatchGroupPlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      customPlayerStatus_ = other.customPlayerStatus_;
      customProfile_ = other.customProfile_;
      matchAttributes_ = other.matchAttributes_.Clone();
      matchStatus_ = other.matchStatus_;
      teamId_ = other.teamId_;
      region_ = other.region_;
      teamLeader_ = other.teamLeader_;
      sdkVersion_ = other.sdkVersion_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupPlayerInfo Clone() {
      return new MatchGroupPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ////  openid - player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 3;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户状态，客户端透传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "custom_profile" field.</summary>
    public const int CustomProfileFieldNumber = 4;
    private string customProfile_ = "";
    /// <summary>
    //// 用户的其他属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProfile {
      get { return customProfile_; }
      set {
        customProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Lagame.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(42, global::Lagame.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::Lagame.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::Lagame.MatchAttribute>();
    /// <summary>
    //// 属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "match_status" field.</summary>
    public const int MatchStatusFieldNumber = 6;
    private global::Lagame.MatchStatus matchStatus_ = global::Lagame.MatchStatus.Pending;
    /// <summary>
    //// [rm-sdk-para] bk：匹配状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.MatchStatus MatchStatus {
      get { return matchStatus_; }
      set {
        matchStatus_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 7;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：团队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 8;
    private string region_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：玩家现在所处的匹配区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_leader" field.</summary>
    public const int TeamLeaderFieldNumber = 9;
    private string teamLeader_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：队长的openId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamLeader {
      get { return teamLeader_; }
      set {
        teamLeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_version" field.</summary>
    public const int SdkVersionFieldNumber = 10;
    private string sdkVersion_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 11;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：player set id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchGroupPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchGroupPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      if (CustomProfile != other.CustomProfile) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if (MatchStatus != other.MatchStatus) return false;
      if (TeamId != other.TeamId) return false;
      if (Region != other.Region) return false;
      if (TeamLeader != other.TeamLeader) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (CustomProfile.Length != 0) hash ^= CustomProfile.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (MatchStatus != global::Lagame.MatchStatus.Pending) hash ^= MatchStatus.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (TeamLeader.Length != 0) hash ^= TeamLeader.GetHashCode();
      if (SdkVersion.Length != 0) hash ^= SdkVersion.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CustomProfile);
      }
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (MatchStatus != global::Lagame.MatchStatus.Pending) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MatchStatus);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TeamId);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Region);
      }
      if (TeamLeader.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TeamLeader);
      }
      if (SdkVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SdkVersion);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProfile);
      }
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (MatchStatus != global::Lagame.MatchStatus.Pending) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchStatus);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (TeamLeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamLeader);
      }
      if (SdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVersion);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchGroupPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      if (other.CustomProfile.Length != 0) {
        CustomProfile = other.CustomProfile;
      }
      matchAttributes_.Add(other.matchAttributes_);
      if (other.MatchStatus != global::Lagame.MatchStatus.Pending) {
        MatchStatus = other.MatchStatus;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.TeamLeader.Length != 0) {
        TeamLeader = other.TeamLeader;
      }
      if (other.SdkVersion.Length != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
          case 34: {
            CustomProfile = input.ReadString();
            break;
          }
          case 42: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 48: {
            MatchStatus = (global::Lagame.MatchStatus) input.ReadEnum();
            break;
          }
          case 58: {
            TeamId = input.ReadString();
            break;
          }
          case 66: {
            Region = input.ReadString();
            break;
          }
          case 74: {
            TeamLeader = input.ReadString();
            break;
          }
          case 82: {
            SdkVersion = input.ReadString();
            break;
          }
          case 90: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家集合(好友组队)
  ///邀请好友，组成group进行匹配, player结构关系：
  ///player ==> group ==> team ==> room
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MatchGroupInfo : pb::IMessage<MatchGroupInfo> {
    private static readonly pb::MessageParser<MatchGroupInfo> _parser = new pb::MessageParser<MatchGroupInfo>(() => new MatchGroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupInfo(MatchGroupInfo other) : this() {
      id_ = other.id_;
      leader_ = other.leader_;
      playerIdList_ = other.playerIdList_.Clone();
      playerInfoList_ = other.playerInfoList_.Clone();
      matchAttributes_ = other.matchAttributes_.Clone();
      region_ = other.region_;
      sdkVersion_ = other.sdkVersion_;
      teamId_ = other.teamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupInfo Clone() {
      return new MatchGroupInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：集合id（s_ld_tsp）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 2;
    private string leader_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：队长 playerId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Leader {
      get { return leader_; }
      set {
        leader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id_list" field.</summary>
    public const int PlayerIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_playerIdList_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> playerIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：集合所有成员 playerId (适配)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayerIdList {
      get { return playerIdList_; }
    }

    /// <summary>Field number for the "player_info_list" field.</summary>
    public const int PlayerInfoListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lagame.MatchPlayerInfo> _repeated_playerInfoList_codec
        = pb::FieldCodec.ForMessage(34, global::Lagame.MatchPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Lagame.MatchPlayerInfo> playerInfoList_ = new pbc::RepeatedField<global::Lagame.MatchPlayerInfo>();
    /// <summary>
    //// [rm-sdk-para] bk：集合中玩家信息列表（兼容数据传递）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.MatchPlayerInfo> PlayerInfoList {
      get { return playerInfoList_; }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Lagame.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(42, global::Lagame.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::Lagame.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::Lagame.MatchAttribute>();
    /// <summary>
    //// [rm-sdk-para] bk：属性列表（avg of each player.attr）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 6;
    private string region_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：玩家现在所处的匹配区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_version" field.</summary>
    public const int SdkVersionFieldNumber = 7;
    private string sdkVersion_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 8;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：加入到队伍的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Leader != other.Leader) return false;
      if(!playerIdList_.Equals(other.playerIdList_)) return false;
      if(!playerInfoList_.Equals(other.playerInfoList_)) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if (Region != other.Region) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (TeamId != other.TeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Leader.Length != 0) hash ^= Leader.GetHashCode();
      hash ^= playerIdList_.GetHashCode();
      hash ^= playerInfoList_.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (SdkVersion.Length != 0) hash ^= SdkVersion.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Leader.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Leader);
      }
      playerIdList_.WriteTo(output, _repeated_playerIdList_codec);
      playerInfoList_.WriteTo(output, _repeated_playerInfoList_codec);
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (Region.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Region);
      }
      if (SdkVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SdkVersion);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Leader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Leader);
      }
      size += playerIdList_.CalculateSize(_repeated_playerIdList_codec);
      size += playerInfoList_.CalculateSize(_repeated_playerInfoList_codec);
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (SdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVersion);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Leader.Length != 0) {
        Leader = other.Leader;
      }
      playerIdList_.Add(other.playerIdList_);
      playerInfoList_.Add(other.playerInfoList_);
      matchAttributes_.Add(other.matchAttributes_);
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.SdkVersion.Length != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Leader = input.ReadString();
            break;
          }
          case 26: {
            playerIdList_.AddEntriesFrom(input, _repeated_playerIdList_codec);
            break;
          }
          case 34: {
            playerInfoList_.AddEntriesFrom(input, _repeated_playerInfoList_codec);
            break;
          }
          case 42: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 50: {
            Region = input.ReadString();
            break;
          }
          case 58: {
            SdkVersion = input.ReadString();
            break;
          }
          case 66: {
            TeamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配
  ///team信息
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MatchTeamInfo : pb::IMessage<MatchTeamInfo> {
    private static readonly pb::MessageParser<MatchTeamInfo> _parser = new pb::MessageParser<MatchTeamInfo>(() => new MatchTeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchTeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTeamInfo(MatchTeamInfo other) : this() {
      teamId_ = other.teamId_;
      teamName_ = other.teamName_;
      teamLeader_ = other.teamLeader_;
      members_ = other.members_.Clone();
      matchAttributes_ = other.matchAttributes_.Clone();
      memberSdkVersions_ = other.memberSdkVersions_.Clone();
      groupIds_ = other.groupIds_.Clone();
      groupSdkVersions_ = other.groupSdkVersions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTeamInfo Clone() {
      return new MatchTeamInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private string teamId_ = "";
    /// <summary>
    //// 队伍id t_ld_tsp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_name" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private string teamName_ = "";
    /// <summary>
    //// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_leader" field.</summary>
    public const int TeamLeaderFieldNumber = 3;
    private string teamLeader_ = "";
    /// <summary>
    //// 队长 playerId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamLeader {
      get { return teamLeader_; }
      set {
        teamLeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_members_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> members_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：来自单人匹配的PlayerId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Lagame.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(42, global::Lagame.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::Lagame.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::Lagame.MatchAttribute>();
    /// <summary>
    //// 属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "member_sdk_versions" field.</summary>
    public const int MemberSdkVersionsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_memberSdkVersions_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> memberSdkVersions_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：单player sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MemberSdkVersions {
      get { return memberSdkVersions_; }
    }

    /// <summary>Field number for the "group_ids" field.</summary>
    public const int GroupIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_groupIds_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> groupIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：player set id list /// [rm-sdk-para] bk：来自Group的GroupId，
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupIds {
      get { return groupIds_; }
    }

    /// <summary>Field number for the "group_sdk_versions" field.</summary>
    public const int GroupSdkVersionsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_groupSdkVersions_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> groupSdkVersions_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：group sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupSdkVersions {
      get { return groupSdkVersions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchTeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchTeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (TeamName != other.TeamName) return false;
      if (TeamLeader != other.TeamLeader) return false;
      if(!members_.Equals(other.members_)) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if(!memberSdkVersions_.Equals(other.memberSdkVersions_)) return false;
      if(!groupIds_.Equals(other.groupIds_)) return false;
      if(!groupSdkVersions_.Equals(other.groupSdkVersions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (TeamLeader.Length != 0) hash ^= TeamLeader.GetHashCode();
      hash ^= members_.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      hash ^= memberSdkVersions_.GetHashCode();
      hash ^= groupIds_.GetHashCode();
      hash ^= groupSdkVersions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TeamId);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      if (TeamLeader.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TeamLeader);
      }
      members_.WriteTo(output, _repeated_members_codec);
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      memberSdkVersions_.WriteTo(output, _repeated_memberSdkVersions_codec);
      groupIds_.WriteTo(output, _repeated_groupIds_codec);
      groupSdkVersions_.WriteTo(output, _repeated_groupSdkVersions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (TeamLeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamLeader);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      size += memberSdkVersions_.CalculateSize(_repeated_memberSdkVersions_codec);
      size += groupIds_.CalculateSize(_repeated_groupIds_codec);
      size += groupSdkVersions_.CalculateSize(_repeated_groupSdkVersions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchTeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.TeamLeader.Length != 0) {
        TeamLeader = other.TeamLeader;
      }
      members_.Add(other.members_);
      matchAttributes_.Add(other.matchAttributes_);
      memberSdkVersions_.Add(other.memberSdkVersions_);
      groupIds_.Add(other.groupIds_);
      groupSdkVersions_.Add(other.groupSdkVersions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamId = input.ReadString();
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 26: {
            TeamLeader = input.ReadString();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 42: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 50: {
            memberSdkVersions_.AddEntriesFrom(input, _repeated_memberSdkVersions_codec);
            break;
          }
          case 58: {
            groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
            break;
          }
          case 66: {
            groupSdkVersions_.AddEntriesFrom(input, _repeated_groupSdkVersions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配请求
  /// </summary>
  public sealed partial class MatchPlayersReq : pb::IMessage<MatchPlayersReq> {
    private static readonly pb::MessageParser<MatchPlayersReq> _parser = new pb::MessageParser<MatchPlayersReq>(() => new MatchPlayersReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersReq(MatchPlayersReq other) : this() {
      matchCode_ = other.matchCode_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersReq Clone() {
      return new MatchPlayersReq(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 2;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    private global::Lagame.MatchPlayerInfo playerInfo_;
    /// <summary>
    //// 匹配的玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.MatchPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchCode);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::Lagame.MatchPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            MatchCode = input.ReadString();
            break;
          }
          case 26: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Lagame.MatchPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配响应
  /// </summary>
  public sealed partial class MatchPlayersRsp : pb::IMessage<MatchPlayersRsp> {
    private static readonly pb::MessageParser<MatchPlayersRsp> _parser = new pb::MessageParser<MatchPlayersRsp>(() => new MatchPlayersRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersRsp(MatchPlayersRsp other) : this() {
      matchCode_ = other.matchCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersRsp Clone() {
      return new MatchPlayersRsp(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersRsp other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家组匹配请求
  /// </summary>
  public sealed partial class MatchGroupReq : pb::IMessage<MatchGroupReq> {
    private static readonly pb::MessageParser<MatchGroupReq> _parser = new pb::MessageParser<MatchGroupReq>(() => new MatchGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupReq(MatchGroupReq other) : this() {
      matchCode_ = other.matchCode_;
      playerInfoList_ = other.playerInfoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupReq Clone() {
      return new MatchGroupReq(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info_list" field.</summary>
    public const int PlayerInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lagame.MatchGroupPlayerInfo> _repeated_playerInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::Lagame.MatchGroupPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Lagame.MatchGroupPlayerInfo> playerInfoList_ = new pbc::RepeatedField<global::Lagame.MatchGroupPlayerInfo>();
    /// <summary>
    //// 好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lagame.MatchGroupPlayerInfo> PlayerInfoList {
      get { return playerInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      if(!playerInfoList_.Equals(other.playerInfoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      hash ^= playerInfoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      playerInfoList_.WriteTo(output, _repeated_playerInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      size += playerInfoList_.CalculateSize(_repeated_playerInfoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      playerInfoList_.Add(other.playerInfoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
          case 18: {
            playerInfoList_.AddEntriesFrom(input, _repeated_playerInfoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家组匹配响应
  /// </summary>
  public sealed partial class MatchGroupRsp : pb::IMessage<MatchGroupRsp> {
    private static readonly pb::MessageParser<MatchGroupRsp> _parser = new pb::MessageParser<MatchGroupRsp>(() => new MatchGroupRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchGroupRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupRsp(MatchGroupRsp other) : this() {
      matchCode_ = other.matchCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupRsp Clone() {
      return new MatchGroupRsp(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchGroupRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchGroupRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchGroupRsp other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配
  ///取消匹配
  /// </summary>
  public sealed partial class CancelPlayerMatchReq : pb::IMessage<CancelPlayerMatchReq> {
    private static readonly pb::MessageParser<CancelPlayerMatchReq> _parser = new pb::MessageParser<CancelPlayerMatchReq>(() => new CancelPlayerMatchReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelPlayerMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchReq(CancelPlayerMatchReq other) : this() {
      matchType_ = other.matchType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchReq Clone() {
      return new CancelPlayerMatchReq(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 3;
    private global::Lagame.MatchType matchType_ = global::Lagame.MatchType.PlayerSimple;
    /// <summary>
    //// 匹配类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelPlayerMatchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelPlayerMatchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != global::Lagame.MatchType.PlayerSimple) hash ^= MatchType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != global::Lagame.MatchType.PlayerSimple) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MatchType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != global::Lagame.MatchType.PlayerSimple) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelPlayerMatchReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != global::Lagame.MatchType.PlayerSimple) {
        MatchType = other.MatchType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            MatchType = (global::Lagame.MatchType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 无
  /// </summary>
  public sealed partial class CancelPlayerMatchRsp : pb::IMessage<CancelPlayerMatchRsp> {
    private static readonly pb::MessageParser<CancelPlayerMatchRsp> _parser = new pb::MessageParser<CancelPlayerMatchRsp>(() => new CancelPlayerMatchRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelPlayerMatchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchRsp(CancelPlayerMatchRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchRsp Clone() {
      return new CancelPlayerMatchRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelPlayerMatchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelPlayerMatchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelPlayerMatchRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///创建房间 - 自定义服务通知
  /// </summary>
  public sealed partial class CreateRoomBst : pb::IMessage<CreateRoomBst> {
    private static readonly pb::MessageParser<CreateRoomBst> _parser = new pb::MessageParser<CreateRoomBst>(() => new CreateRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomBst(CreateRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomBst Clone() {
      return new CreateRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 新的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///销毁房间 - 自定义服务通知
  /// </summary>
  public sealed partial class DestroyRoomBst : pb::IMessage<DestroyRoomBst> {
    private static readonly pb::MessageParser<DestroyRoomBst> _parser = new pb::MessageParser<DestroyRoomBst>(() => new DestroyRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestroyRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomBst(DestroyRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomBst Clone() {
      return new DestroyRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息， 只设置roomid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestroyRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestroyRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestroyRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///加入房间广播（客户端）
  /// </summary>
  public sealed partial class JoinRoomBst : pb::IMessage<JoinRoomBst> {
    private static readonly pb::MessageParser<JoinRoomBst> _parser = new pb::MessageParser<JoinRoomBst>(() => new JoinRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomBst(JoinRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      joinPlayerId_ = other.joinPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomBst Clone() {
      return new JoinRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 新的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "join_player_id" field.</summary>
    public const int JoinPlayerIdFieldNumber = 2;
    private string joinPlayerId_ = "";
    /// <summary>
    //// 加入房间openid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JoinPlayerId {
      get { return joinPlayerId_; }
      set {
        joinPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (JoinPlayerId != other.JoinPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (JoinPlayerId.Length != 0) hash ^= JoinPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (JoinPlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JoinPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (JoinPlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JoinPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.JoinPlayerId.Length != 0) {
        JoinPlayerId = other.JoinPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 18: {
            JoinPlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///退房广播信息（客户端）
  /// </summary>
  public sealed partial class LeaveRoomBst : pb::IMessage<LeaveRoomBst> {
    private static readonly pb::MessageParser<LeaveRoomBst> _parser = new pb::MessageParser<LeaveRoomBst>(() => new LeaveRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomBst(LeaveRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      leavePlayerId_ = other.leavePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomBst Clone() {
      return new LeaveRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 新的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "leave_player_id" field.</summary>
    public const int LeavePlayerIdFieldNumber = 2;
    private string leavePlayerId_ = "";
    /// <summary>
    //// 离开房间openid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeavePlayerId {
      get { return leavePlayerId_; }
      set {
        leavePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (LeavePlayerId != other.LeavePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (LeavePlayerId.Length != 0) hash ^= LeavePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (LeavePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LeavePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (LeavePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeavePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.LeavePlayerId.Length != 0) {
        LeavePlayerId = other.LeavePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 18: {
            LeavePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///踢人广播信息（客户端）
  /// </summary>
  public sealed partial class RemovePlayerBst : pb::IMessage<RemovePlayerBst> {
    private static readonly pb::MessageParser<RemovePlayerBst> _parser = new pb::MessageParser<RemovePlayerBst>(() => new RemovePlayerBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemovePlayerBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerBst(RemovePlayerBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      removePlayerId_ = other.removePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerBst Clone() {
      return new RemovePlayerBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "remove_player_id" field.</summary>
    public const int RemovePlayerIdFieldNumber = 2;
    private string removePlayerId_ = "";
    /// <summary>
    //// 移除的用户openid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemovePlayerId {
      get { return removePlayerId_; }
      set {
        removePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemovePlayerBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemovePlayerBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (RemovePlayerId != other.RemovePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (RemovePlayerId.Length != 0) hash ^= RemovePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (RemovePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RemovePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (RemovePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemovePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemovePlayerBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.RemovePlayerId.Length != 0) {
        RemovePlayerId = other.RemovePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 18: {
            RemovePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///解散房间广播信息（客户端）
  /// </summary>
  public sealed partial class DismissRoomBst : pb::IMessage<DismissRoomBst> {
    private static readonly pb::MessageParser<DismissRoomBst> _parser = new pb::MessageParser<DismissRoomBst>(() => new DismissRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomBst(DismissRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomBst Clone() {
      return new DismissRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息， 只设置roomid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间属性变更广播信息（客户端）
  /// </summary>
  public sealed partial class ChangeRoomBst : pb::IMessage<ChangeRoomBst> {
    private static readonly pb::MessageParser<ChangeRoomBst> _parser = new pb::MessageParser<ChangeRoomBst>(() => new ChangeRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomBst(ChangeRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomBst Clone() {
      return new ChangeRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 变更后房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间消息信息广播（客户端）
  /// </summary>
  public sealed partial class RecvFromClientBst : pb::IMessage<RecvFromClientBst> {
    private static readonly pb::MessageParser<RecvFromClientBst> _parser = new pb::MessageParser<RecvFromClientBst>(() => new RecvFromClientBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvFromClientBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromClientBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromClientBst(RecvFromClientBst other) : this() {
      roomId_ = other.roomId_;
      sendPlayerId_ = other.sendPlayerId_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromClientBst Clone() {
      return new RecvFromClientBst(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// 房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "send_player_id" field.</summary>
    public const int SendPlayerIdFieldNumber = 2;
    private string sendPlayerId_ = "";
    /// <summary>
    //// 发送信息的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendPlayerId {
      get { return sendPlayerId_; }
      set {
        sendPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    //// 消息详细内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvFromClientBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvFromClientBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (SendPlayerId != other.SendPlayerId) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (SendPlayerId.Length != 0) hash ^= SendPlayerId.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (SendPlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SendPlayerId);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (SendPlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendPlayerId);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvFromClientBst other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.SendPlayerId.Length != 0) {
        SendPlayerId = other.SendPlayerId;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            SendPlayerId = input.ReadString();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户状态广播（客户端）
  /// </summary>
  public sealed partial class ChangeCustomPlayerStatusBst : pb::IMessage<ChangeCustomPlayerStatusBst> {
    private static readonly pb::MessageParser<ChangeCustomPlayerStatusBst> _parser = new pb::MessageParser<ChangeCustomPlayerStatusBst>(() => new ChangeCustomPlayerStatusBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomPlayerStatusBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusBst(ChangeCustomPlayerStatusBst other) : this() {
      changePlayerId_ = other.changePlayerId_;
      customPlayerStatus_ = other.customPlayerStatus_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusBst Clone() {
      return new ChangeCustomPlayerStatusBst(this);
    }

    /// <summary>Field number for the "change_player_id" field.</summary>
    public const int ChangePlayerIdFieldNumber = 1;
    private string changePlayerId_ = "";
    /// <summary>
    //// 变更的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChangePlayerId {
      get { return changePlayerId_; }
      set {
        changePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 2;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomPlayerStatusBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomPlayerStatusBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangePlayerId != other.ChangePlayerId) return false;
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangePlayerId.Length != 0) hash ^= ChangePlayerId.GetHashCode();
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangePlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChangePlayerId);
      }
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangePlayerId);
      }
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomPlayerStatusBst other) {
      if (other == null) {
        return;
      }
      if (other.ChangePlayerId.Length != 0) {
        ChangePlayerId = other.ChangePlayerId;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChangePlayerId = input.ReadString();
            break;
          }
          case 16: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户网络状态广播（客户端）
  /// </summary>
  public sealed partial class ChangePlayerNetworkStateBst : pb::IMessage<ChangePlayerNetworkStateBst> {
    private static readonly pb::MessageParser<ChangePlayerNetworkStateBst> _parser = new pb::MessageParser<ChangePlayerNetworkStateBst>(() => new ChangePlayerNetworkStateBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePlayerNetworkStateBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateBst(ChangePlayerNetworkStateBst other) : this() {
      changePlayerId_ = other.changePlayerId_;
      networkState_ = other.networkState_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateBst Clone() {
      return new ChangePlayerNetworkStateBst(this);
    }

    /// <summary>Field number for the "change_player_id" field.</summary>
    public const int ChangePlayerIdFieldNumber = 1;
    private string changePlayerId_ = "";
    /// <summary>
    //// 变更的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChangePlayerId {
      get { return changePlayerId_; }
      set {
        changePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 2;
    private global::Lagame.NetworkState networkState_ = global::Lagame.NetworkState.CommonOffline;
    /// <summary>
    //// 用户状态, 包括房间内状态和游戏中状态两种（客户端区分）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.NetworkState NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePlayerNetworkStateBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePlayerNetworkStateBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangePlayerId != other.ChangePlayerId) return false;
      if (NetworkState != other.NetworkState) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangePlayerId.Length != 0) hash ^= ChangePlayerId.GetHashCode();
      if (NetworkState != global::Lagame.NetworkState.CommonOffline) hash ^= NetworkState.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangePlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChangePlayerId);
      }
      if (NetworkState != global::Lagame.NetworkState.CommonOffline) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NetworkState);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangePlayerId);
      }
      if (NetworkState != global::Lagame.NetworkState.CommonOffline) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkState);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePlayerNetworkStateBst other) {
      if (other == null) {
        return;
      }
      if (other.ChangePlayerId.Length != 0) {
        ChangePlayerId = other.ChangePlayerId;
      }
      if (other.NetworkState != global::Lagame.NetworkState.CommonOffline) {
        NetworkState = other.NetworkState;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChangePlayerId = input.ReadString();
            break;
          }
          case 16: {
            NetworkState = (global::Lagame.NetworkState) input.ReadEnum();
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///匹配超时广播（客户端）
  ///匹配失败也通过该接口广播，失败原因详见err_code
  /// </summary>
  public sealed partial class MatchTimeoutBst : pb::IMessage<MatchTimeoutBst> {
    private static readonly pb::MessageParser<MatchTimeoutBst> _parser = new pb::MessageParser<MatchTimeoutBst>(() => new MatchTimeoutBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchTimeoutBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTimeoutBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTimeoutBst(MatchTimeoutBst other) : this() {
      matchType_ = other.matchType_;
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTimeoutBst Clone() {
      return new MatchTimeoutBst(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 1;
    private global::Lagame.MatchType matchType_ = global::Lagame.MatchType.PlayerSimple;
    /// <summary>
    //// 匹配类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private int errCode_;
    /// <summary>
    //// 业务错误码，如果非0，表示匹配失败，0表示匹配超时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchTimeoutBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchTimeoutBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != global::Lagame.MatchType.PlayerSimple) hash ^= MatchType.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != global::Lagame.MatchType.PlayerSimple) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchType);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != global::Lagame.MatchType.PlayerSimple) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchTimeoutBst other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != global::Lagame.MatchType.PlayerSimple) {
        MatchType = other.MatchType;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchType = (global::Lagame.MatchType) input.ReadEnum();
            break;
          }
          case 16: {
            ErrCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///小组取消匹配广播（客户端）
  /// </summary>
  public sealed partial class CancelMatchBst : pb::IMessage<CancelMatchBst> {
    private static readonly pb::MessageParser<CancelMatchBst> _parser = new pb::MessageParser<CancelMatchBst>(() => new CancelMatchBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelMatchBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelMatchBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelMatchBst(CancelMatchBst other) : this() {
      matchCode_ = other.matchCode_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelMatchBst Clone() {
      return new CancelMatchBst(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    //// 发起取消匹配的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelMatchBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelMatchBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelMatchBst other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///匹配用户广播（客户端）
  ///用户匹配成功，广播给客户端
  /// </summary>
  public sealed partial class MatchPlayersBst : pb::IMessage<MatchPlayersBst> {
    private static readonly pb::MessageParser<MatchPlayersBst> _parser = new pb::MessageParser<MatchPlayersBst>(() => new MatchPlayersBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersBst(MatchPlayersBst other) : this() {
      matchType_ = other.matchType_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersBst Clone() {
      return new MatchPlayersBst(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 1;
    private global::Lagame.MatchType matchType_ = global::Lagame.MatchType.PlayerSimple;
    /// <summary>
    //// 匹配类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 2;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 新的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != global::Lagame.MatchType.PlayerSimple) hash ^= MatchType.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != global::Lagame.MatchType.PlayerSimple) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchType);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != global::Lagame.MatchType.PlayerSimple) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersBst other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != global::Lagame.MatchType.PlayerSimple) {
        MatchType = other.MatchType;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchType = (global::Lagame.MatchType) input.ReadEnum();
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///开始帧同步的广播
  /// </summary>
  public sealed partial class StartFrameSyncBst : pb::IMessage<StartFrameSyncBst> {
    private static readonly pb::MessageParser<StartFrameSyncBst> _parser = new pb::MessageParser<StartFrameSyncBst>(() => new StartFrameSyncBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartFrameSyncBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncBst(StartFrameSyncBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncBst Clone() {
      return new StartFrameSyncBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartFrameSyncBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartFrameSyncBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartFrameSyncBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///结束帧同步的广播
  /// </summary>
  public sealed partial class StopFrameSyncBst : pb::IMessage<StopFrameSyncBst> {
    private static readonly pb::MessageParser<StopFrameSyncBst> _parser = new pb::MessageParser<StopFrameSyncBst>(() => new StopFrameSyncBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopFrameSyncBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncBst(StopFrameSyncBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncBst Clone() {
      return new StopFrameSyncBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Lagame.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopFrameSyncBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopFrameSyncBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopFrameSyncBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::Lagame.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::Lagame.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////帧同步消息广播
  /// </summary>
  public sealed partial class RecvFrameBst : pb::IMessage<RecvFrameBst> {
    private static readonly pb::MessageParser<RecvFrameBst> _parser = new pb::MessageParser<RecvFrameBst>(() => new RecvFrameBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvFrameBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFrameBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFrameBst(RecvFrameBst other) : this() {
      frame_ = other.frame_ != null ? other.frame_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFrameBst Clone() {
      return new RecvFrameBst(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private global::Lagame.Frame frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.Frame Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvFrameBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvFrameBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Frame, other.Frame)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frame_ != null) hash ^= Frame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (frame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Frame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvFrameBst other) {
      if (other == null) {
        return;
      }
      if (other.frame_ != null) {
        if (frame_ == null) {
          Frame = new global::Lagame.Frame();
        }
        Frame.MergeFrom(other.Frame);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (frame_ == null) {
              Frame = new global::Lagame.Frame();
            }
            input.ReadMessage(Frame);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameSvrCommunication : pb::IMessage<GameSvrCommunication> {
    private static readonly pb::MessageParser<GameSvrCommunication> _parser = new pb::MessageParser<GameSvrCommunication>(() => new GameSvrCommunication());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSvrCommunication> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSvrCommunication() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSvrCommunication(GameSvrCommunication other) : this() {
      type_ = other.type_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSvrCommunication Clone() {
      return new GameSvrCommunication(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Lagame.GameSvrForwardType type_ = global::Lagame.GameSvrForwardType.EGsForwardtypeDefault;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.GameSvrForwardType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSvrCommunication);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSvrCommunication other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Lagame.GameSvrForwardType.EGsForwardtypeDefault) hash ^= Type.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Lagame.GameSvrForwardType.EGsForwardtypeDefault) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Lagame.GameSvrForwardType.EGsForwardtypeDefault) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSvrCommunication other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Lagame.GameSvrForwardType.EGsForwardtypeDefault) {
        Type = other.Type;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Lagame.GameSvrForwardType) input.ReadEnum();
            break;
          }
          case 18: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRelayConnectionReq : pb::IMessage<NotifyRelayConnectionReq> {
    private static readonly pb::MessageParser<NotifyRelayConnectionReq> _parser = new pb::MessageParser<NotifyRelayConnectionReq>(() => new NotifyRelayConnectionReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRelayConnectionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRelayConnectionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRelayConnectionReq(NotifyRelayConnectionReq other) : this() {
      roomId_ = other.roomId_;
      ip_ = other.ip_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRelayConnectionReq Clone() {
      return new NotifyRelayConnectionReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRelayConnectionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRelayConnectionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRelayConnectionReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRoomEventReq : pb::IMessage<NotifyRoomEventReq> {
    private static readonly pb::MessageParser<NotifyRoomEventReq> _parser = new pb::MessageParser<NotifyRoomEventReq>(() => new NotifyRoomEventReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRoomEventReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomEventReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomEventReq(NotifyRoomEventReq other) : this() {
      cmd_ = other.cmd_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomEventReq Clone() {
      return new NotifyRoomEventReq(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private global::Lagame.ServerSendClientBstWrap2Type cmd_ = global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest;
    /// <summary>
    ////业务命令字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lagame.ServerSendClientBstWrap2Type Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ////业务body, 比如CreateRoomRsp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRoomEventReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRoomEventReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest) hash ^= Cmd.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRoomEventReq other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != global::Lagame.ServerSendClientBstWrap2Type.EPushTypeTest) {
        Cmd = other.Cmd;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cmd = (global::Lagame.ServerSendClientBstWrap2Type) input.ReadEnum();
            break;
          }
          case 18: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////给自定义扩展svr发送消息
  /// </summary>
  public sealed partial class SendToGameSvrReq : pb::IMessage<SendToGameSvrReq> {
    private static readonly pb::MessageParser<SendToGameSvrReq> _parser = new pb::MessageParser<SendToGameSvrReq>(() => new SendToGameSvrReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToGameSvrReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrReq(SendToGameSvrReq other) : this() {
      roomId_ = other.roomId_;
      playerId_ = other.playerId_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrReq Clone() {
      return new SendToGameSvrReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToGameSvrReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToGameSvrReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToGameSvrReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendToGameSvrRsp : pb::IMessage<SendToGameSvrRsp> {
    private static readonly pb::MessageParser<SendToGameSvrRsp> _parser = new pb::MessageParser<SendToGameSvrRsp>(() => new SendToGameSvrRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToGameSvrRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrRsp(SendToGameSvrRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrRsp Clone() {
      return new SendToGameSvrRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToGameSvrRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToGameSvrRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToGameSvrRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ////gamesvr反向推送给客户端的消息
  /// </summary>
  public sealed partial class RecvFromGameSvrBst : pb::IMessage<RecvFromGameSvrBst> {
    private static readonly pb::MessageParser<RecvFromGameSvrBst> _parser = new pb::MessageParser<RecvFromGameSvrBst>(() => new RecvFromGameSvrBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvFromGameSvrBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGameSvrBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGameSvrBst(RecvFromGameSvrBst other) : this() {
      roomId_ = other.roomId_;
      recvPlayerIdList_ = other.recvPlayerIdList_.Clone();
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGameSvrBst Clone() {
      return new RecvFromGameSvrBst(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    ////必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recv_player_id_list" field.</summary>
    public const int RecvPlayerIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_recvPlayerIdList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> recvPlayerIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 要推送的用户列表, 为空则给对局内所有成员推送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecvPlayerIdList {
      get { return recvPlayerIdList_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    /// <summary>
    //// 推送的内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvFromGameSvrBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvFromGameSvrBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if(!recvPlayerIdList_.Equals(other.recvPlayerIdList_)) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      hash ^= recvPlayerIdList_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      recvPlayerIdList_.WriteTo(output, _repeated_recvPlayerIdList_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      size += recvPlayerIdList_.CalculateSize(_repeated_recvPlayerIdList_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvFromGameSvrBst other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      recvPlayerIdList_.Add(other.recvPlayerIdList_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            recvPlayerIdList_.AddEntriesFrom(input, _repeated_recvPlayerIdList_codec);
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientRecvFromGameSvrRsp : pb::IMessage<ClientRecvFromGameSvrRsp> {
    private static readonly pb::MessageParser<ClientRecvFromGameSvrRsp> _parser = new pb::MessageParser<ClientRecvFromGameSvrRsp>(() => new ClientRecvFromGameSvrRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientRecvFromGameSvrRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lagame.ProtoReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRecvFromGameSvrRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRecvFromGameSvrRsp(ClientRecvFromGameSvrRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRecvFromGameSvrRsp Clone() {
      return new ClientRecvFromGameSvrRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientRecvFromGameSvrRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientRecvFromGameSvrRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientRecvFromGameSvrRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
